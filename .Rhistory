cor(predict(tempobj, data=datatrain[testind,])$predictions, datatrain[testind,]$y)
trainind <- 1:round((5/7)*n)
testind <- (round((5/7)*n)+1):round((6/7)*n)
tempobj <- ranger(y ~ ., data=datatrain[trainind,], num.trees=1000)
plot(predict(tempobj, data=datatrain[testind,])$predictions, datatrain[testind,]$y)
cor(predict(tempobj, data=datatrain[testind,])$predictions, datatrain[testind,]$y)
trainind <- 1:round((4/7)*n)
testind <- (round((4/7)*n)+1):round((5/7)*n)
tempobj <- ranger(y ~ ., data=datatrain[trainind,], num.trees=1000)
plot(predict(tempobj, data=datatrain[testind,])$predictions, datatrain[testind,]$y)
cor(predict(tempobj, data=datatrain[testind,])$predictions, datatrain[testind,]$y)
set.seed(1234)
n <- 500
sizes <- rep(floor(n/7), 7)
if(n - 7*floor(n/7) > 0)
sizes[1:(n - 7*floor(n/7))] <- sizes[1:(n - 7*floor(n/7))] + 1
train_sets1 <- lapply(cumsum(sizes[-length(sizes)]), function(x) 1:x)
train_sets2 <- train_sets1[-length(train_sets1)]
test_sets1 <- lapply(data.frame(rbind(cumsum(sizes[-length(sizes)]) + 1, cumsum(sizes)[-1])), function(x) x[1]:x[2])
test_sets2 <- test_sets1[-1]
seasonbreaks <- seq(0, 1, length=8)
seasonbreaks <- c(seasonbreaks[1:6], (seasonbreaks[6]+seasonbreaks[7])/2, seasonbreaks[7], (seasonbreaks[7]+seasonbreaks[8])/2, seasonbreaks[8])
x1muend <- 8; x2muend <- 4; x3muend <- -8; ymuend <- 6; yvarend <- 6
datatrain <- sim_dataset(seq(seasonbreaks[1], seasonbreaks[6], length=n),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
# End of last training season:
datatest_1 <- sim_dataset(rep(seasonbreaks[6], 100000),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
# Mid of first follow-up season:
datatest_2 <- sim_dataset(rep(seasonbreaks[7], 100000),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
# End first follow-up season:
datatest_3 <- sim_dataset(rep(seasonbreaks[8], 100000),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
# Mid of second follow-up season:
datatest_4 <- sim_dataset(rep(seasonbreaks[9], 100000),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
# End of second follow-up season:
datatest_5 <- sim_dataset(rep(seasonbreaks[10], 100000),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
require("mlr3")
require("mlr3temporal")
require("mlr3verse")
# if (method=="lm")
#   learner_temp <- lrn("regr.lm")
# if (method=="rf")
learner_temp <- lrn("regr.ranger")
# lgr::get_logger("mlr3")$set_threshold("warn")
task <- as_task_regr(datatrain, target="y")
# task_i$set_col_roles(cols="index", remove_from="feature")
# subsamp0.8 <- rsmp("subsampling", repeats = 100, ratio = 0.8)
# Regular CV:
cv <- rsmp("repeated_cv", repeats = 10, folds = 5)
cv$instantiate(task)
result_cv <- resample(task=task, learner=learner_temp, resampling=cv)
mse_cv <- result_cv$aggregate(msr("regr.mse"))
# One-season look ahead temporal CV:
tempcv <- rsmp("custom")
tempcv$instantiate(task, train_sets1, test_sets1)
result_tempcv <- resample(task=task, learner=learner_temp, resampling=tempcv)
mse_tempcv1 <- result_tempcv$aggregate(msr("regr.mse"))
# Two-seasons look ahead temporal CV:
tempcv <- rsmp("custom")
tempcv$instantiate(task, train_sets2, test_sets2)
result_tempcv <- resample(task=task, learner=learner_temp, resampling=tempcv)
mse_tempcv2 <- result_tempcv$aggregate(msr("regr.mse"))
# Hold-out: one season look-ahead:
learner_temp$train(task, row_ids = train_sets1[[length(train_sets1)]])
predictions <- learner_temp$predict(task, row_ids = test_sets1[[length(test_sets1)]])
mse_tempholdout1 <- predictions$score(msr("regr.mse"))
# Hold-out: two seasons look-ahead:
learner_temp$train(task, row_ids = train_sets2[[length(train_sets2)]])
predictions <- learner_temp$predict(task, row_ids = test_sets2[[length(test_sets2)]])
mse_tempholdout2 <- predictions$score(msr("regr.mse"))
datacompl <- rbind(datatrain, datatest_1, datatest_2, datatest_3, datatest_4, datatest_5)
ntrain <- nrow(datatrain); ntest_1 <- nrow(datatest_1); ntest_2 <- nrow(datatest_2)
ntest_3 <- nrow(datatest_3); ntest_4 <- nrow(datatest_4); ntest_5 <- nrow(datatest_5)
rm(datatrain, datatest_1, datatest_2, datatest_3, datatest_4, datatest_5); gc()
# Define the task for the top-down classification rule:
task <- as_task_regr(datacompl, target="y")
# Learn on the whole dataset:
learner_temp$train(task, row_ids = 1:ntrain)
predictions <- learner_temp$predict(task, row_ids = (ntrain+1):(ntrain+ntest_1))
mse_true_1 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+1):(ntrain+ntest_1+ntest_2))
mse_true_2 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+ntest_2+1):(ntrain+ntest_1+ntest_2+ntest_3))
mse_true_3 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+ntest_2+ntest_3+1):(ntrain+ntest_1+ntest_2+ntest_3+ntest_4))
mse_true_4 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+ntest_2+ntest_3+ntest_4+1):(ntrain+ntest_1+ntest_2+ntest_3+ntest_4+ntest_5))
mse_true_5 <- predictions$score(msr("regr.mse"))
# Regular CV:
mse_cv
# One-season look ahead temporal CV:
mse_tempcv1
# Two-seasons look ahead temporal CV:
mse_tempcv2
# Hold-out: one season look-ahead:
mse_tempholdout1
# Hold-out: two seasons look-ahead:
mse_tempholdout2
# True MSE end of last training season:
mse_true_1
# True MSE mid of first follow-up season:
mse_true_2
# True MSE end first follow-up season:
mse_true_3
# True MSE mid of second follow-up season:
mse_true_4
# True MSE end of second follow-up season:
mse_true_5
set.seed(1234)
n <- 300
sizes <- rep(floor(n/7), 7)
if(n - 7*floor(n/7) > 0)
sizes[1:(n - 7*floor(n/7))] <- sizes[1:(n - 7*floor(n/7))] + 1
train_sets1 <- lapply(cumsum(sizes[-length(sizes)]), function(x) 1:x)
train_sets2 <- train_sets1[-length(train_sets1)]
test_sets1 <- lapply(data.frame(rbind(cumsum(sizes[-length(sizes)]) + 1, cumsum(sizes)[-1])), function(x) x[1]:x[2])
test_sets2 <- test_sets1[-1]
seasonbreaks <- seq(0, 1, length=8)
seasonbreaks <- c(seasonbreaks[1:6], (seasonbreaks[6]+seasonbreaks[7])/2, seasonbreaks[7], (seasonbreaks[7]+seasonbreaks[8])/2, seasonbreaks[8])
x1muend <- 4; x2muend <- 2; x3muend <- -4; ymuend <- 3; yvarend <- 3
datatrain <- sim_dataset(seq(seasonbreaks[1], seasonbreaks[6], length=n),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
# End of last training season:
datatest_1 <- sim_dataset(rep(seasonbreaks[6], 100000),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
# Mid of first follow-up season:
datatest_2 <- sim_dataset(rep(seasonbreaks[7], 100000),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
# End first follow-up season:
datatest_3 <- sim_dataset(rep(seasonbreaks[8], 100000),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
# Mid of second follow-up season:
datatest_4 <- sim_dataset(rep(seasonbreaks[9], 100000),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
# End of second follow-up season:
datatest_5 <- sim_dataset(rep(seasonbreaks[10], 100000),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
require("mlr3")
require("mlr3temporal")
require("mlr3verse")
# if (method=="lm")
#   learner_temp <- lrn("regr.lm")
# if (method=="rf")
learner_temp <- lrn("regr.ranger")
# lgr::get_logger("mlr3")$set_threshold("warn")
task <- as_task_regr(datatrain, target="y")
# task_i$set_col_roles(cols="index", remove_from="feature")
# subsamp0.8 <- rsmp("subsampling", repeats = 100, ratio = 0.8)
# Regular CV:
cv <- rsmp("repeated_cv", repeats = 10, folds = 5)
cv$instantiate(task)
result_cv <- resample(task=task, learner=learner_temp, resampling=cv)
mse_cv <- result_cv$aggregate(msr("regr.mse"))
# One-season look ahead temporal CV:
tempcv <- rsmp("custom")
tempcv$instantiate(task, train_sets1, test_sets1)
result_tempcv <- resample(task=task, learner=learner_temp, resampling=tempcv)
mse_tempcv1 <- result_tempcv$aggregate(msr("regr.mse"))
# Two-seasons look ahead temporal CV:
tempcv <- rsmp("custom")
tempcv$instantiate(task, train_sets2, test_sets2)
result_tempcv <- resample(task=task, learner=learner_temp, resampling=tempcv)
mse_tempcv2 <- result_tempcv$aggregate(msr("regr.mse"))
# Hold-out: one season look-ahead:
learner_temp$train(task, row_ids = train_sets1[[length(train_sets1)]])
predictions <- learner_temp$predict(task, row_ids = test_sets1[[length(test_sets1)]])
mse_tempholdout1 <- predictions$score(msr("regr.mse"))
# Hold-out: two seasons look-ahead:
learner_temp$train(task, row_ids = train_sets2[[length(train_sets2)]])
predictions <- learner_temp$predict(task, row_ids = test_sets2[[length(test_sets2)]])
mse_tempholdout2 <- predictions$score(msr("regr.mse"))
datacompl <- rbind(datatrain, datatest_1, datatest_2, datatest_3, datatest_4, datatest_5)
ntrain <- nrow(datatrain); ntest_1 <- nrow(datatest_1); ntest_2 <- nrow(datatest_2)
ntest_3 <- nrow(datatest_3); ntest_4 <- nrow(datatest_4); ntest_5 <- nrow(datatest_5)
rm(datatrain, datatest_1, datatest_2, datatest_3, datatest_4, datatest_5); gc()
# Define the task for the top-down classification rule:
task <- as_task_regr(datacompl, target="y")
# Learn on the whole dataset:
learner_temp$train(task, row_ids = 1:ntrain)
predictions <- learner_temp$predict(task, row_ids = (ntrain+1):(ntrain+ntest_1))
mse_true_1 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+1):(ntrain+ntest_1+ntest_2))
mse_true_2 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+ntest_2+1):(ntrain+ntest_1+ntest_2+ntest_3))
mse_true_3 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+ntest_2+ntest_3+1):(ntrain+ntest_1+ntest_2+ntest_3+ntest_4))
mse_true_4 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+ntest_2+ntest_3+ntest_4+1):(ntrain+ntest_1+ntest_2+ntest_3+ntest_4+ntest_5))
mse_true_5 <- predictions$score(msr("regr.mse"))
# Regular CV:
mse_cv
# One-season look ahead temporal CV:
mse_tempcv1
# Two-seasons look ahead temporal CV:
mse_tempcv2
# Hold-out: one season look-ahead:
mse_tempholdout1
# Hold-out: two seasons look-ahead:
mse_tempholdout2
# True MSE end of last training season:
mse_true_1
# True MSE mid of first follow-up season:
mse_true_2
# True MSE end first follow-up season:
mse_true_3
# True MSE mid of second follow-up season:
mse_true_4
# True MSE end of second follow-up season:
mse_true_5
set.seed(1234)
n <- 300
sizes <- rep(floor(n/7), 7)
if(n - 7*floor(n/7) > 0)
sizes[1:(n - 7*floor(n/7))] <- sizes[1:(n - 7*floor(n/7))] + 1
train_sets1 <- lapply(cumsum(sizes[-length(sizes)]), function(x) 1:x)
train_sets2 <- train_sets1[-length(train_sets1)]
test_sets1 <- lapply(data.frame(rbind(cumsum(sizes[-length(sizes)]) + 1, cumsum(sizes)[-1])), function(x) x[1]:x[2])
test_sets2 <- test_sets1[-1]
seasonbreaks <- seq(0, 1, length=8)
seasonbreaks <- c(seasonbreaks[1:6], (seasonbreaks[6]+seasonbreaks[7])/2, seasonbreaks[7], (seasonbreaks[7]+seasonbreaks[8])/2, seasonbreaks[8])
x1muend <- 2; x2muend <- 1; x3muend <- -2; ymuend <- 1.5; yvarend <- 1.5
datatrain <- sim_dataset(seq(seasonbreaks[1], seasonbreaks[6], length=n),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
# End of last training season:
datatest_1 <- sim_dataset(rep(seasonbreaks[6], 100000),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
# Mid of first follow-up season:
datatest_2 <- sim_dataset(rep(seasonbreaks[7], 100000),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
# End first follow-up season:
datatest_3 <- sim_dataset(rep(seasonbreaks[8], 100000),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
# Mid of second follow-up season:
datatest_4 <- sim_dataset(rep(seasonbreaks[9], 100000),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
# End of second follow-up season:
datatest_5 <- sim_dataset(rep(seasonbreaks[10], 100000),
x1muend=x1muend, x2muend=x2muend, x3muend=x3muend, ymuend=ymuend, yvarend=yvarend)
require("mlr3")
require("mlr3temporal")
require("mlr3verse")
# if (method=="lm")
#   learner_temp <- lrn("regr.lm")
# if (method=="rf")
learner_temp <- lrn("regr.ranger")
# lgr::get_logger("mlr3")$set_threshold("warn")
task <- as_task_regr(datatrain, target="y")
# task_i$set_col_roles(cols="index", remove_from="feature")
# subsamp0.8 <- rsmp("subsampling", repeats = 100, ratio = 0.8)
# Regular CV:
cv <- rsmp("repeated_cv", repeats = 10, folds = 5)
cv$instantiate(task)
result_cv <- resample(task=task, learner=learner_temp, resampling=cv)
mse_cv <- result_cv$aggregate(msr("regr.mse"))
# One-season look ahead temporal CV:
tempcv <- rsmp("custom")
tempcv$instantiate(task, train_sets1, test_sets1)
result_tempcv <- resample(task=task, learner=learner_temp, resampling=tempcv)
mse_tempcv1 <- result_tempcv$aggregate(msr("regr.mse"))
# Two-seasons look ahead temporal CV:
tempcv <- rsmp("custom")
tempcv$instantiate(task, train_sets2, test_sets2)
result_tempcv <- resample(task=task, learner=learner_temp, resampling=tempcv)
mse_tempcv2 <- result_tempcv$aggregate(msr("regr.mse"))
# Hold-out: one season look-ahead:
learner_temp$train(task, row_ids = train_sets1[[length(train_sets1)]])
predictions <- learner_temp$predict(task, row_ids = test_sets1[[length(test_sets1)]])
mse_tempholdout1 <- predictions$score(msr("regr.mse"))
# Hold-out: two seasons look-ahead:
learner_temp$train(task, row_ids = train_sets2[[length(train_sets2)]])
predictions <- learner_temp$predict(task, row_ids = test_sets2[[length(test_sets2)]])
mse_tempholdout2 <- predictions$score(msr("regr.mse"))
datacompl <- rbind(datatrain, datatest_1, datatest_2, datatest_3, datatest_4, datatest_5)
ntrain <- nrow(datatrain); ntest_1 <- nrow(datatest_1); ntest_2 <- nrow(datatest_2)
ntest_3 <- nrow(datatest_3); ntest_4 <- nrow(datatest_4); ntest_5 <- nrow(datatest_5)
rm(datatrain, datatest_1, datatest_2, datatest_3, datatest_4, datatest_5); gc()
# Define the task for the top-down classification rule:
task <- as_task_regr(datacompl, target="y")
# Learn on the whole dataset:
learner_temp$train(task, row_ids = 1:ntrain)
predictions <- learner_temp$predict(task, row_ids = (ntrain+1):(ntrain+ntest_1))
mse_true_1 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+1):(ntrain+ntest_1+ntest_2))
mse_true_2 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+ntest_2+1):(ntrain+ntest_1+ntest_2+ntest_3))
mse_true_3 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+ntest_2+ntest_3+1):(ntrain+ntest_1+ntest_2+ntest_3+ntest_4))
mse_true_4 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+ntest_2+ntest_3+ntest_4+1):(ntrain+ntest_1+ntest_2+ntest_3+ntest_4+ntest_5))
mse_true_5 <- predictions$score(msr("regr.mse"))
# Regular CV:
mse_cv
# One-season look ahead temporal CV:
mse_tempcv1
# Two-seasons look ahead temporal CV:
mse_tempcv2
# Hold-out: one season look-ahead:
mse_tempholdout1
# Hold-out: two seasons look-ahead:
mse_tempholdout2
# True MSE end of last training season:
mse_true_1
# True MSE mid of first follow-up season:
mse_true_2
# True MSE end first follow-up season:
mse_true_3
# True MSE mid of second follow-up season:
mse_true_4
# True MSE end of second follow-up season:
mse_true_5
remove.packages("diversityForest")
remove.packages("diversityForest")
install.packages("diversityForest")
library("diversityForest")
library("diversityForest")
remove.packages("diversityForest")
remove.packages("diversityForest")
remove.packages("diversityForest")
remove.packages("diversityForest")
remove.packages("diversityForest")
remove.packages("diversityForest")
remove.packages("diversityForest")
library("diversityForest")
remotes::install_github("RomanHornung/diversityForest")
library(diversityForest)
?plotPair
?plotPair
library(diversityForest)
?plotPair
?interactionfor
library(diversityForest)
?interactionfor
?plotPair
remove.packages("diversityForest")
remove.packages("diversityForest")
remove.packages("diversityForest")
setwd("Z:/Projects/DESTATIS/PredErrorComplex/PPerfEstComplex")
load("./Simulations/ClustData/Results/intermediate_results/scenariogrid.Rda")
load("./Simulations/ClustData/Results/intermediate_results/results.Rda")
metrics <- data.frame(random=sapply(results, function(x) x$mse_cv3),
grouped=sapply(results, function(x) x$mse_cv3g))
ls()
results[[1]]
metrics <- data.frame(random_rf=sapply(results, function(x) x$mse_cv3_rf),
grouped_rf=sapply(results, function(x) x$mse_cv3g_rf),
random_lm=sapply(results, function(x) x$mse_cv3_lm),
grouped_lm=sapply(results, function(x) x$mse_cv3g_lm))
reorderind <- order(scenariogrid$fixed, scenariogrid$N, scenariogrid$ni,
scenariogrid$sdbinter, scenariogrid$sdbslope, scenariogrid$sdeps,
scenariogrid$repetition)
scengrid <- scenariogrid[reorderind,]
metrics <- metrics[reorderind,]
rownames(scengrid) <- rownames(metrics) <- NULL
results <- scengrid
results$seed <- NULL
head(results)
results$random_rf <- metrics$random_rf
results$grouped_rf <- metrics$grouped_rf
results$random_lm <- metrics$random_lm
results$grouped_lm <- metrics$grouped_lm
head(results)
results$sdeps <- results$sdeps^2
namesbefore <- c("N", "ni", "sdbinter", "sdbslope", "sdeps", "fixed", "repetition", "random_rf", "grouped_rf", "random_lm", "grouped_lm")
ncol(results) == length(namesbefore) & all(names(results)==namesbefore)
if(ncol(results) == length(namesbefore) & all(names(results)==namesbefore))
names(results) <- c("N", "n_i", "var_intercept", "var_slope", "var_eps", "fixed", "repetition", "random_rf", "grouped_rf", "random_lm", "grouped_lm")
head(results)
results$N <- factor(results$N)
results$n_i <- factor(results$n_i)
results$var_intercept <- factor(results$var_intercept)
results$var_slope <- factor(results$var_slope)
results$var_eps <- factor(results$var_eps)
results$fixed <- factor(results$fixed)
resultssafe <- results
?reshape
# reshape data into long format
results <- reshape(
results,
idvar = "id",
varying = list(c("random_rf", "grouped_rf", "random_lm", "grouped_lm")),
v.names = "CV_err",
timevar = "type_predmethod",
times = c("random_rf", "grouped_rf", "random_lm", "grouped_lm"),
direction = "long"
)
# split "type_predmethod" variable into "type" and "predmethod" variables
results$type <- substr(results$type_predmethod, 1, nchar(results$type_predmethod) - 3)
head(results)
results <- resultssafe
# reshape data into long format
results <- reshape(
results,
idvar = "id",
varying = list(c("random_rf", "grouped_rf", "random_lm", "grouped_lm")),
v.names = "CV_err",
timevar = "type_predmethod",
times = c("random_rf", "grouped_rf", "random_lm", "grouped_lm"),
direction = "long"
)
head(results)
# split "type_predmethod" variable into "type" and "predmethod" variables
results$type <- substr(results$type_predmethod, 1, nchar(results$type_predmethod) - 3)
results$predmethod <- substr(results$type_predmethod, nchar(results$type_predmethod) - 1, nchar(results$type_predmethod))
head(results)
# remove the original "type_predmethod" variable
results$type_predmethod <- NULL
head(results)
results$id <- NULL
head(results)
rownames(results) <- NULL
head(results)
head(results$type)
results$type <- factor(results$type, levels=c("random", "grouped"))
results$predmethod <- factor(results$predmethod, levels=c("rf", "lm"))
resultsum <- ddply(results, .variables=c("fixed", "N", "n_i", "var_intercept", "var_slope", "var_eps", "type", "predmethod"),
.fun=summarise, CV_err = mean(CV_err))
library("plyr")
resultsum <- ddply(results, .variables=c("fixed", "N", "n_i", "var_intercept", "var_slope", "var_eps", "type", "predmethod"),
.fun=summarise, CV_err = mean(CV_err))
dim(resultsum)
head(resultsum)
# PLOT DESCRIPTION:
res <- results[results$fixed=="none",]
res$N_n_i <- paste0("N = ", res$N, ", n_m = ", res$n_i)
res$N_n_i <- factor(res$N_n_i, levels=c("N = 10, n_m = 5", "N = 10, n_m = 25", "N = 50, n_m = 5", "N = 50, n_m = 25"))
library("ggplot2")
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, fill=type)) + theme_bw() +
geom_boxplot() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both, ncol = 2, scales="free_y") +
ylab("Cross-validated MSE") +
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10),
legend.position = "none")
p
head(results)
res <- results[results$fixed=="none" & results$predmethod=="rf",]
res$N_n_i <- paste0("N = ", res$N, ", n_m = ", res$n_i)
res$N_n_i <- factor(res$N_n_i, levels=c("N = 10, n_m = 5", "N = 10, n_m = 25", "N = 50, n_m = 5", "N = 50, n_m = 25"))
library("ggplot2")
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, fill=type)) + theme_bw() +
geom_boxplot() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both, ncol = 2, scales="free_y") +
ylab("Cross-validated MSE") +
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10),
legend.position = "none")
p
ggsave("./Simulations/ClustData/Results/figures/cv_none_fixed_rf.pdf", width=9, height=9)
res <- results[results$fixed=="first" & results$predmethod=="rf",]
res$N_n_i <- paste0("N = ", res$N, ", n_m = ", res$n_i)
res$N_n_i <- factor(res$N_n_i, levels=c("N = 10, n_m = 5", "N = 10, n_m = 25", "N = 50, n_m = 5", "N = 50, n_m = 25"))
library("ggplot2")
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, fill=type)) + theme_bw() +
geom_boxplot() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both, ncol = 2, scales="free_y") +
ylab("Cross-validated MSE") +
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10),
legend.position = "none")
p
ggsave("./Simulations/ClustData/Results/figures/cv_first_fixed_rf.pdf", width=9, height=9)
res <- results[results$fixed=="second" & results$predmethod=="rf",]
res$N_n_i <- paste0("N = ", res$N, ", n_m = ", res$n_i)
res$N_n_i <- factor(res$N_n_i, levels=c("N = 10, n_m = 5", "N = 10, n_m = 25", "N = 50, n_m = 5", "N = 50, n_m = 25"))
library("ggplot2")
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, fill=type)) + theme_bw() +
geom_boxplot() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both, ncol = 2, scales="free_y") +
ylab("Cross-validated MSE") +
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10),
legend.position = "none")
p
ggsave("./Simulations/ClustData/Results/figures/cv_second_fixed_rf.pdf", width=9, height=9)
table(results$predmethod)
# PLOT DESCRIPTION:
res <- results[results$fixed=="none" & results$predmethod=="lm",]
res$N_n_i <- paste0("N = ", res$N, ", n_m = ", res$n_i)
res$N_n_i <- factor(res$N_n_i, levels=c("N = 10, n_m = 5", "N = 10, n_m = 25", "N = 50, n_m = 5", "N = 50, n_m = 25"))
library("ggplot2")
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, fill=type)) + theme_bw() +
geom_boxplot() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both, ncol = 2, scales="free_y") +
ylab("Cross-validated MSE") +
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10),
legend.position = "none")
p
ggsave("./Simulations/ClustData/Results/figures/cv_none_fixed_lm.pdf", width=9, height=9)
res <- results[results$fixed=="first" & results$predmethod=="lm",]
res$N_n_i <- paste0("N = ", res$N, ", n_m = ", res$n_i)
res$N_n_i <- factor(res$N_n_i, levels=c("N = 10, n_m = 5", "N = 10, n_m = 25", "N = 50, n_m = 5", "N = 50, n_m = 25"))
library("ggplot2")
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, fill=type)) + theme_bw() +
geom_boxplot() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both, ncol = 2, scales="free_y") +
ylab("Cross-validated MSE") +
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10),
legend.position = "none")
p
ggsave("./Simulations/ClustData/Results/figures/cv_first_fixed_lm.pdf", width=9, height=9)
res <- results[results$fixed=="second" & results$predmethod=="lm",]
res$N_n_i <- paste0("N = ", res$N, ", n_m = ", res$n_i)
res$N_n_i <- factor(res$N_n_i, levels=c("N = 10, n_m = 5", "N = 10, n_m = 25", "N = 50, n_m = 5", "N = 50, n_m = 25"))
library("ggplot2")
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, fill=type)) + theme_bw() +
geom_boxplot() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both, ncol = 2, scales="free_y") +
ylab("Cross-validated MSE") +
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10),
legend.position = "none")
p
ggsave("./Simulations/ClustData/Results/figures/cv_second_fixed_lm.pdf", width=9, height=9)
