head(paste0("N = ", res$N, ", n_i = ", res$n_i))
res$N_n_i <- paste0("N = ", res$N, ", n_i = ", res$n_i)
unique(res$N_n_i)
res$N_n_i <- factor(res$N_n_i, levels=c("N = 10, n_i = 5", "N = 10, n_i = 25", "N = 50, n_i = 5", "N = 50, n_i = 25"))
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type)) + geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps)
p
res
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, group=type)) + geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps)
p
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type, group=1)) + geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps)
p
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type, group=type)) + geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps)
p
?facet_wrap
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type, group=type)) + geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps, strip.position = ="right")
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type, group=type)) + geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps, strip.position = "right")
p
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type, group=type)) + geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = "label_both")
p
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type, group=type)) + geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = labeller(.cols = label_both, .multi_line = FALSE))
p
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type, group=type)) + geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = labeller(.multi_line = FALSE, .cols = label_both))
p
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type, group=type)) + geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = labeller(.cols = label_parsed, .multi_line = FALSE))
p
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type, group=type)) + geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both(multi_line = TRUE))
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type, group=type)) + geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = labeller(.rows = label_both, .multi_line = FALSE))
p
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type, group=type)) + geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both)
p
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type, group=type)) + theme_bw() +
geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both) +
theme(axis.title.x=element_blank(), axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10))
p
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type, group=type)) + theme_bw() +
geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both) +
theme(axis.title.x=element_blank(), axis.text.x = element_text(angle=,45, hjust = 1, color="black", size=10))
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type, group=type)) + theme_bw() +
geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both) +
theme(axis.title.x=element_blank(), axis.text.x = element_text(angle=-45, hjust = 1, color="black", size=10))
p
180+45
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type, group=type)) + theme_bw() +
geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both) +
theme(axis.title.x=element_blank(), axis.text.x = element_text(angle=225, hjust = 1, color="black", size=10))
p
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type, group=type)) + theme_bw() +
geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both) +
theme(axis.title.x=element_blank(), axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10))
p
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type, group=type)) + theme_bw() +
geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both, ncol = 2) +
theme(axis.title.x=element_blank(), axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10))
p
library("ggplot2")
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type, group=type)) + theme_bw() +
geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both, ncol = 2) +
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10),
legend.position = "none")
p
res <- resultsum[resultsum$fixed=="first",]
res$N_n_i <- paste0("N = ", res$N, ", n_i = ", res$n_i)
res$N_n_i <- factor(res$N_n_i, levels=c("N = 10, n_i = 5", "N = 10, n_i = 25", "N = 50, n_i = 5", "N = 50, n_i = 25"))
library("ggplot2")
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type, group=type)) + theme_bw() +
geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both, ncol = 2) +
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10),
legend.position = "none")
p
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type, group=type)) + theme_bw() +
geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both, ncol = 2) +
ylab("Mean cross-validation error") +
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10),
legend.position = "none")
p
ggsave("./Simulations/ClustData/Results/figures/MeanCV_none_fixed", width=5, height=15)
rlang::last_error()
getwd()
ggsave(file="./Simulations/ClustData/Results/figures/MeanCV_none_fixed", width=5, height=15)
dev.off()
dev.off()
res <- resultsum[resultsum$fixed=="none",]
res$N_n_i <- paste0("N = ", res$N, ", n_i = ", res$n_i)
res$N_n_i <- factor(res$N_n_i, levels=c("N = 10, n_i = 5", "N = 10, n_i = 25", "N = 50, n_i = 5", "N = 50, n_i = 25"))
library("ggplot2")
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type, group=type)) + theme_bw() +
geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both, ncol = 2) +
ylab("Mean cross-validation error") +
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10),
legend.position = "none")
p
ggsave(file="./Simulations/ClustData/Results/figures/MeanCV_none_fixed", width=5, height=15)
ggsave("./Simulations/ClustData/Results/figures/MeanCV_none_fixed.pdf", width=5, height=15)
ggsave("./Simulations/ClustData/Results/figures/MeanCV_none_fixed.pdf", width=7, height=10)
ggsave("./Simulations/ClustData/Results/figures/MeanCV_none_fixed.pdf", width=7, height=9)
res <- resultsum[resultsum$fixed=="first",]
res$N_n_i <- paste0("N = ", res$N, ", n_i = ", res$n_i)
res$N_n_i <- factor(res$N_n_i, levels=c("N = 10, n_i = 5", "N = 10, n_i = 25", "N = 50, n_i = 5", "N = 50, n_i = 25"))
library("ggplot2")
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type, group=type)) + theme_bw() +
geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both, ncol = 2) +
ylab("Mean cross-validation error") +
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10),
legend.position = "none")
p
ggsave("./Simulations/ClustData/Results/figures/MeanCV_first_fixed.pdf", width=7, height=9)
res <- resultsum[resultsum$fixed=="second",]
res$N_n_i <- paste0("N = ", res$N, ", n_i = ", res$n_i)
res$N_n_i <- factor(res$N_n_i, levels=c("N = 10, n_i = 5", "N = 10, n_i = 25", "N = 50, n_i = 5", "N = 50, n_i = 25"))
library("ggplot2")
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type, group=type)) + theme_bw() +
geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both, ncol = 2) +
ylab("Mean cross-validation error") +
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10),
legend.position = "none")
p
ggsave("./Simulations/ClustData/Results/figures/MeanCV_second_fixed.pdf", width=7, height=9)
simuldata <- function(N=50, ni=5, beta=c(1, 1, -1, 0, 0), sdbinter=0, sdbslope=0, sdeps=1, fixed=c("none", "first", "second"))
{
p <- length(beta)
x <- matrix(rnorm(N*ni*p), N*ni, p)
index <- rep(1:N, each=ni)
if (fixed=="first")
x[index, 1] <- rnorm(N)
if (fixed=="second")
x[index, 2] <- rnorm(N)
b <- rep(rnorm(N, sd=sdbinter), each=ni)
b2 <- rep(rnorm(N, sd=sdbslope), each=ni)
eps <- rnorm(N*ni, sd=sdeps)
y <- x%*%beta + b + x[, 1]*b2 + eps
dataset <- data.frame(y=y, x=x, index=index)
return(list(dataset=dataset, b=b, b2=b2))
}
ui <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=0, sdbslope=0, sdeps=1, fixed="first")
fix(ui)
ui <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=0, sdbslope=0, sdeps=1, fixed="first")$dataset
fix(ui)
N=50; ni=5; beta=c(1; 1; -1; 0; 0); sdbinter=0; sdbslope=0; sdeps=1; fixed=c("none", "first", "second")
N=50; ni=5; beta=c(1, 1, -1, 0, 0); sdbinter=0; sdbslope=0; sdeps=1; fixed=c("none", "first", "second")
p <- length(beta)
x <- matrix(rnorm(N*ni*p), N*ni, p)
index <- rep(1:N, each=ni)
index
rnorm(N)
bla <- x[,1]
bla
uia <- rnorm(N)
bla[index] <- uia
bla
plot(bla)
bla <- x[,1]
uia <- rnorm(N)
bla <- uia[index]
bla
table(bla, index)
head(bla)
bla <- factor(bla, levels=sort(bla))
bla <- factor(bla, levels=sort(unique(bla)))
table(bla, index)
head(bla)
bla <- x[,1]
uia <- rnorm(N)
bla <- uia[index]
bla <- factor(bla, levels=uia)
table(bla, index)
simuldata <- function(N=50, ni=5, beta=c(1, 1, -1, 0, 0), sdbinter=0, sdbslope=0, sdeps=1, fixed=c("none", "first", "second"))
{
p <- length(beta)
x <- matrix(rnorm(N*ni*p), N*ni, p)
index <- rep(1:N, each=ni)
if (fixed=="first")
x[, 1] <- rnorm(N)[index]
if (fixed=="second")
x[, 2] <- rnorm(N)[index]
b <- rep(rnorm(N, sd=sdbinter), each=ni)
b2 <- rep(rnorm(N, sd=sdbslope), each=ni)
eps <- rnorm(N*ni, sd=sdeps)
y <- x%*%beta + b + x[, 1]*b2 + eps
dataset <- data.frame(y=y, x=x, index=index)
return(list(dataset=dataset, b=b, b2=b2))
}
ui <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=0, sdbslope=0, sdeps=1, fixed="first")$dataset
fix(ui)
ui <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=0, sdbslope=0, sdeps=1, fixed="second")$dataset
fix(ui)
res <- results[results$fixed=="none",]
res$N_n_i <- paste0("N = ", res$N, ", n_i = ", res$n_i)
res$N_n_i <- factor(res$N_n_i, levels=c("N = 10, n_i = 5", "N = 10, n_i = 25", "N = 50, n_i = 5", "N = 50, n_i = 25"))
res <- results[results$fixed=="none",]
res$N_n_i <- paste0("N = ", res$N, ", n_i = ", res$n_i)
res$N_n_i <- factor(res$N_n_i, levels=c("N = 10, n_i = 5", "N = 10, n_i = 25", "N = 50, n_i = 5", "N = 50, n_i = 25"))
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type, group=type)) + theme_bw() +
geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both, ncol = 2) +
ylab("Mean cross-validation error") +
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10),
legend.position = "none")
p
dim(res)
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type, group=type)) + theme_bw() +
geom_boxplot() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both, ncol = 2) +
ylab("Mean cross-validation error") +
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10),
legend.position = "none")
p
fix(rs)
fix(res)
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, fill=type)) + theme_bw() +
geom_boxplot() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both, ncol = 2) +
ylab("Mean cross-validation error") +
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10),
legend.position = "none")
p
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, fill=type)) + theme_bw() +
geom_boxplot() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both, ncol = 2, scales="free_y") +
ylab("Mean cross-validation error") +
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10),
legend.position = "none")
p
x11()
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type, group=type)) + theme_bw() +
geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both, ncol = 2) +
ylab("Mean cross-validation error") +
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10),
legend.position = "none")
p
res <- resultsum[resultsum$fixed=="none",]
res$N_n_i <- paste0("N = ", res$N, ", n_i = ", res$n_i)
res$N_n_i <- factor(res$N_n_i, levels=c("N = 10, n_i = 5", "N = 10, n_i = 25", "N = 50, n_i = 5", "N = 50, n_i = 25"))
library("ggplot2")
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type, group=type)) + theme_bw() +
geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both, ncol = 2) +
ylab("Mean cross-validation error") +
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10),
legend.position = "none")
p
res <- results[results$fixed=="none",]
res$N_n_i <- paste0("N = ", res$N, ", n_i = ", res$n_i)
res$N_n_i <- factor(res$N_n_i, levels=c("N = 10, n_i = 5", "N = 10, n_i = 25", "N = 50, n_i = 5", "N = 50, n_i = 25"))
library("ggplot2")
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, fill=type)) + theme_bw() +
geom_boxplot() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both, ncol = 2, scales="free_y") +
ylab("Mean cross-validation error") +
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10),
legend.position = "none")
p
x11()
res <- resultsum[resultsum$fixed=="none",]
res$N_n_i <- paste0("N = ", res$N, ", n_i = ", res$n_i)
res$N_n_i <- factor(res$N_n_i, levels=c("N = 10, n_i = 5", "N = 10, n_i = 25", "N = 50, n_i = 5", "N = 50, n_i = 25"))
library("ggplot2")
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, color=type, group=type)) + theme_bw() +
geom_line() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both, ncol = 2) +
ylab("Mean cross-validation error") +
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10),
legend.position = "none")
p
res <- results[results$fixed=="first",]
res$N_n_i <- paste0("N = ", res$N, ", n_i = ", res$n_i)
res$N_n_i <- factor(res$N_n_i, levels=c("N = 10, n_i = 5", "N = 10, n_i = 25", "N = 50, n_i = 5", "N = 50, n_i = 25"))
library("ggplot2")
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, fill=type)) + theme_bw() +
geom_boxplot() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both, ncol = 2, scales="free_y") +
ylab("Mean cross-validation error") +
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10),
legend.position = "none")
p
res <- results[results$fixed=="none",]
res$N_n_i <- paste0("N = ", res$N, ", n_i = ", res$n_i)
res$N_n_i <- factor(res$N_n_i, levels=c("N = 10, n_i = 5", "N = 10, n_i = 25", "N = 50, n_i = 5", "N = 50, n_i = 25"))
library("ggplot2")
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, fill=type)) + theme_bw() +
geom_boxplot() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both, ncol = 2, scales="free_y") +
ylab("Mean cross-validation error") +
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10),
legend.position = "none")
p
ggsave("./Simulations/ClustData/Results/figures/CV_none_fixed.pdf", width=7, height=9)
ggsave("./Simulations/ClustData/Results/figures/CV_none_fixed.pdf", width=8, height=9)
ggsave("./Simulations/ClustData/Results/figures/CV_none_fixed.pdf", width=9, height=9)
load("./Simulations/HierPr/results/intermediate_results/restrials.Rda")
res5_l
boxplot(t(sapply(res5_s, function(x) x$precs)))
boxplot(t(sapply(res5_s, function(x) x$precscond)))
boxplot(t(sapply(res5_l, function(x) x$precs)))
boxplot(t(sapply(res5_l, function(x) x$precscond)))
boxplot(t(sapply(res3_l, function(x) x$precscond)))
load("./simulations/hierpr/results/intermediate_results/treestruc.Rda")
class(treestruc)
length(treestruc)
names(treestruc)
length(treestruc$nodelist)
head(treestruc$nodelist)
simulate_coefs <- function(treestruc, sdbeta0=sqrt(1),
sdbeta=sqrt(c(1, 1.5, 2, 2.5, 3))) {
coeflist <- vector(mode = "list", length = length(treestruc$nodelist))
for(i in seq(along=coeflist)) {
coeflist[[i]] <- list()
# Add the information on the child nodes for each node:
coeflist[[i]]$childnodes <- treestruc$nodelist[[i]]
# Add the information on the parent nodes for each node:
coeflist[[i]]$parentnodes <- which(sapply(1:length(coeflist), function(x) i %in% coeflist[[x]]$childnodes))
# Add the layer of each node:
coeflist[[i]]$layer <- which(sapply(1:length(treestruc$leftnodes), function(x) (i >= treestruc$leftnodes[x]) & (i <= treestruc$rightnodes[x])))
}
#asdf
# Simulate the coefficients:
maxlayer <- max(sapply(coeflist, function(x) x$layer))
for(i in seq(along=coeflist)) {
# if(coeflist[[i]]$layer==maxlayer) {
#   coeflist[[i]]$coefs <- NA
# } else {
if(length(coeflist[[i]]$childnodes)==2) {
coefs <- matrix(nrow=1, ncol=6, data=c(rnorm(1, sd=sdbeta0), rnorm(5, sd=sdbeta[coeflist[[i]]$layer])))
}
if(length(coeflist[[i]]$childnodes)==3) {
coefs <- rbind(c(rnorm(1, sd=sdbeta0), rnorm(5, sd=sdbeta[coeflist[[i]]$layer])),
c(rnorm(1, sd=sdbeta0), rnorm(5, sd=sdbeta[coeflist[[i]]$layer])))
}
coeflist[[i]]$coefs <- coefs
# }
}
return(coeflist)
}
coeflist <- simulate_coefs(treestruc=treestruc, sdbeta0=sqrt(1),
sdbeta=sqrt(c(2.5, 2, 0.9, 0.7, 0.5)))
length(coeflist)
head(coeflist)
source("./simulations/hierpr/functions.R")
plot_structure(treestruc)
tail(coeflist)
maxlayer <- max(sapply(coeflist, function(x) x$layer))
maxlayer
dataobj <- sim_data(n=1000, coeflist=coeflist)
sim_data <- function(n, coeflist) {
# Simulate the covariate matrix:
X <- matrix(nrow=n, ncol=5, rnorm(n*5))
# Simulate the outcome:
maxlayer <- max(sapply(coeflist, function(x) x$layer))
# Outcome matrix with 6 columns where
outcomemat <- matrix(nrow=nrow(X), ncol=maxlayer)
tempclass <- coeflist[[1]]$childnodes[get_child_nodes(X, coeflist[[1]]$coefs)]
outcomemat[,1] <- tempclass
coeflist[[1]]$datanode <- data.frame(X)
coeflist[[1]]$datanode$y <- factor(tempclass)
for(i in 2:length(coeflist)) {
subs <- outcomemat[,coeflist[[i]]$layer-1]==i
tempclass <- coeflist[[i]]$childnodes[get_child_nodes(X[subs,], coeflist[[i]]$coefs)]
outcomemat[subs,coeflist[[i]]$layer] <- tempclass
coeflist[[i]]$datanode <- data.frame(X[subs,])
coeflist[[i]]$datanode$y <- factor(tempclass)
}
ystring <- apply(outcomemat, 1, function(x) paste(x, collapse="."))
data <- data.frame(X)
data$y <- factor(ystring)
return(list(data=data, coeflist=coeflist))
}
dataobj <- sim_data(n=1000, coeflist=coeflist)
get_child_nodes <- function(Xsub, coefs) {
# Determine the (unstandardized) probabilities for each child node:
desmat <- cbind(1, Xsub)
if (nrow(coefs)==2)
vProb <- cbind(1, exp(desmat%*%coefs[1,]), exp(desmat%*%coefs[2,]))
else
vProb <- cbind(1, exp(desmat%*%coefs[1,]))
# Draw the child nodes based on the probabilities obtained in the
# first step:
mChoices <- t(apply(vProb, 1, rmultinom, n = 1, size = 1))
# Make a vector of the child node indices:
ys <- apply(mChoices, 1, function(x) which(x==1))
return(ys)
}
dataobj <- sim_data(n=1000, coeflist=coeflist)
class(dataobj)
length(dataobj)
names(dataobj)
ui <- dataobj$data
dim(ui)
head(ui)
ui2 <- dataobj$coeflist
ui2[length(ui2)]
coeflist <- simulate_coefs(treestruc=treestruc, sdbeta0=sqrt(1),
sdbeta=sqrt(c(2.5, 2, 0.9, 0.7, 0.5)))
n
n<-1000
X <- matrix(nrow=n, ncol=5, rnorm(n*5))
maxlayer <- max(sapply(coeflist, function(x) x$layer))
# Outcome matrix with 5 columns, where the j-th column
# will contain the classes of the observations in the
# j-th layer:
outcomemat <- matrix(nrow=nrow(X), ncol=maxlayer)
# Determine the child nodes of the root node:
tempclass <- coeflist[[1]]$childnodes[get_child_nodes(X, coeflist[[1]]$coefs)]
# Assign these child node classes:
outcomemat[,1] <- tempclass
# Store the data associated with the node also in 'coeflist':
coeflist[[1]]$datanode <- data.frame(X)
coeflist[[1]]$datanode$y <- factor(tempclass)
fix(outcomemat)
i
i<-2
subs <- outcomemat[,coeflist[[i]]$layer-1]==i
class(subs)
head(subs)
head(subs, 10)
fix(subs)
fix(outcomemat)
tempclass <- coeflist[[i]]$childnodes[get_child_nodes(X[subs,], coeflist[[i]]$coefs)]
head(tempclass)
table(tempclass)
length(tempclass)
i
coeflist[[i]]$layer
setwd("Z:/Projects/DESTATIS/PredErrorComplex/PPerfEstComplex")
# Load and pre-process the results:
###################################
load("./Simulations/ClustData/Results/intermediate_results/scenariogrid.Rda")
load("./Simulations/ClustData/Results/intermediate_results/results.Rda")
metrics <- data.frame(random=sapply(results, function(x) x$mse_cv3),
grouped=sapply(results, function(x) x$mse_cv3g))
reorderind <- order(scenariogrid$fixed, scenariogrid$N, scenariogrid$ni,
scenariogrid$sdbinter, scenariogrid$sdbslope, scenariogrid$sdeps,
scenariogrid$iter)
scengrid <- scenariogrid[reorderind,]
metrics <- metrics[reorderind,]
rownames(scengrid) <- rownames(metrics) <- NULL
results <- scengrid
results$seed <- NULL
results$random <- metrics$random
results$grouped <- metrics$grouped
head(results)
results$sdeps <- results$sdeps^2
namesbefore <- c("N", "ni", "sdbinter", "sdbslope", "sdeps", "fixed", "iter", "random", "grouped")
if(ncol(results) == length(namesbefore) & all(names(results)==c("N", "ni", "sdbinter", "sdbslope", "sdeps", "fixed", "iter", "random", "grouped")))
names(results) <- c("N", "n_i", "var_intercept", "var_slope", "var_eps", "fixed", "iter", "random", "grouped")
results$N <- factor(results$N)
results$n_i <- factor(results$n_i)
results$var_intercept <- factor(results$var_intercept)
results$var_slope <- factor(results$var_slope)
results$var_eps <- factor(results$var_eps)
results$fixed <- factor(results$fixed)
results <- reshape(results, varying=c("random", "grouped"),
v.names="CV_err",
timevar="type", times=c("random", "grouped"),
direction="long")
results$type <- factor(results$type, levels=c("random", "grouped"))
library("plyr")
resultsum <- ddply(results, .variables=c("fixed", "N", "n_i", "var_intercept", "var_slope", "var_eps", "type"),
.fun=summarise, CV_err = mean(CV_err))
resultsum
any(is.na(resultsum$CV_err))
# PLOT DESCRIPTION:
res <- results[results$fixed=="none",]
res$N_n_i <- paste0("N = ", res$N, ", n_i = ", res$n_i)
res$N_n_i <- factor(res$N_n_i, levels=c("N = 10, n_i = 5", "N = 10, n_i = 25", "N = 50, n_i = 5", "N = 50, n_i = 25"))
library("ggplot2")
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, fill=type)) + theme_bw() +
geom_boxplot() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both, ncol = 2, scales="free_y") +
ylab("Mean cross-validation error") +
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10),
legend.position = "none")
p
ggsave("./Simulations/ClustData/Results/figures/cv_none_fixed.pdf", width=9, height=9)
library("ggplot2")
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, fill=type)) + theme_bw() +
geom_boxplot() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both, ncol = 2, scales="free_y") +
ylab("Cross-validation error") +
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10),
legend.position = "none")
p
ggsave("./Simulations/ClustData/Results/figures/cv_none_fixed.pdf", width=9, height=9)
res <- results[results$fixed=="first",]
res$N_n_i <- paste0("N = ", res$N, ", n_i = ", res$n_i)
res$N_n_i <- factor(res$N_n_i, levels=c("N = 10, n_i = 5", "N = 10, n_i = 25", "N = 50, n_i = 5", "N = 50, n_i = 25"))
library("ggplot2")
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, fill=type)) + theme_bw() +
geom_boxplot() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both, ncol = 2, scales="free_y") +
ylab("Cross-validation error") +
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10),
legend.position = "none")
p
ggsave("./Simulations/ClustData/Results/figures/cv_first_fixed.pdf", width=9, height=9)
res <- results[results$fixed=="second",]
res$N_n_i <- paste0("N = ", res$N, ", n_i = ", res$n_i)
res$N_n_i <- factor(res$N_n_i, levels=c("N = 10, n_i = 5", "N = 10, n_i = 25", "N = 50, n_i = 5", "N = 50, n_i = 25"))
library("ggplot2")
p <- ggplot(data=res, aes(x=N_n_i, y=CV_err, fill=type)) + theme_bw() +
geom_boxplot() + facet_wrap(~ var_intercept + var_slope + var_eps, labeller = label_both, ncol = 2, scales="free_y") +
ylab("Cross-validation error") +
theme(axis.title.x=element_blank(),
axis.text.x = element_text(angle=45, hjust = 1, color="black", size=10),
legend.position = "none")
p
ggsave("./Simulations/ClustData/Results/figures/cv_second_fixed.pdf", width=9, height=9)
