fix(data0)
cumsum(9)
cumsum(1:9)
sum(1:9)
10*9/2
remove.packages("rfvimptest")
remove.packages("rfvimptest")
remove.packages("diversityForest")
remove.packages("diversityForest")
library(party)
?party
?cforest
tolower("Sequential Permutation Testing of Random Forest Variable Importance Measures")
tolower("CHARACTERISTICS AND PROGNOSTIC FACTORS OF ACUTE MYELOID LEUKEMIA WITH MUTATED RUNX1")
remaininds <- c(8, 160, 169, 220, 298, 358, 386, 562, 596, 624, 776, 803,
814, 821, 931, 972, 1061, 1119)
length(remaininds)
1000/100000
?
friedman.test(data$Wert, data$Zeitpunkt, data$Proband)
#### 2
# Make table of settings:
#dat <- c("COAD.Rda", "LGG.Rda", "OV.Rda", "PAAD.Rda", "SKCM.Rda", "UCEC.Rda")
dat <- c("BLCA.RData","BRCA.RData", "COAD.RData", "ESCA.RData", "HNSC.RData",
"LGG.RData", "LIHC.RData", "LUAD.RData", "LUSC.RData", "PAAD.RData",
"PRAD.RData", "SARC.RData", "SKCM.RData", "STAD.RData", "UCEC.RData")
featuremethod <- c("t-test","chi-squared","infor","relief", "mrmr","rf") # rank method
cvind <- 1:3
cvfoldind <- 1:5
nselvars <- c(10, 100, 1000, 5000) # 0.01%, 0.1%, 1%, 5%
selectseparately <- c(1,0) # naive or group True is 1, 0 is false.
alwaysincludclin <- c(1,0) # clinic information
scenariogrid <- expand.grid(selectseparately = selectseparately, nselvars=nselvars,
alwaysincludclin = alwaysincludclin, cvind=cvind, dat=dat,
cvfoldind=cvfoldind, featuremethod=featuremethod, stringsAsFactors = FALSE)
dim(scenariogrid)
head(scenariogrid)
fix(scenariogrid)
ui <- matrix(nrow=10, ncol=5, data=rnormr(10*5))
friedman.test(ui)
ui <- matrix(nrow=10, ncol=5, data=rnormr(10*5))
ui <- matrix(nrow=10, ncol=5, data=rnorm(10*5))
friedman.test(ui)
data <- data.frame(y=as.vector(ui), groups=rep(1:4, each=10), blocks=rep(1:10, times=4))
data <- data.frame(y=as.vector(ui), groups=rep(1:5, each=10), blocks=rep(1:10, times=5))
fix(data)
ui
friedman.test(y=data$y, groups=data$groups, blocks=data$blocks)
friedman.test(ui)
tolower("Sequential Permutation Testing of Random Forest Variable Importance Measures")
tolower("rfvimptest: Sequential Permutation Testing of Random Forest Variable Importance Measures")
seq(0, 1, by=0.125)
seq(0, 1, length=6)
length(seq(0, 1, by=0.125))
ls()
load("Z:/p.ad_nonrankmethod.RData")
ls()
p.ad_nonrankmethod
load("Z:/nonrankdata.RData")
rm(list=ls());gc()
load("Z:/nonrankdata.RData")
ls()
dim(nonrankdata)
fix(nonrankdata)
length(unique(nonrankdata$dat))
15*15
fix(nonrankdata)
length(unique(nonrankdata$featuremethod))
length(unique(nonrankdata$dat))
15*3*15
dim(nonrankdata)
fix(nonrankdata)
15*3*15*4
15*2*15*4 + 3*1*15*4
table(nonrankdata$dat, nonrankdata$featuremethod)
15*4
names(nonrankdata)
table(nonrankdata$dat[nonrankdata$featuremethod=="ga"], nonrankdata$alwaysincludclin[nonrankdata$featuremethod=="ga"])
table(nonrankdata$dat[nonrankdata$featuremethod=="ga"], nonrankdata$selectseparately[nonrankdata$featuremethod=="ga"])
table(nonrankdata$dat[nonrankdata$featuremethod=="lasso"], nonrankdata$selectseparately[nonrankdata$featuremethod=="lasso"])
fix(nonrankdata)
length(table(nonrankdata$seed))
inds <- sapply(unique(nonrankdata$seed), function(x) which(nonrankdata$seed==x)[1])
inds
aha <- nonrankdata[inds,]
fix(aha)
names(aha)
aha <- aha[order(aha$dat, aha$cvind, aha$cvfoldind, aha$featuremethod, aha$alwaysincludclin, aha$selectseparately),]
fix(aha)
aha <- nonrankdata[nonrankdata$seed==unique(nonrankdata$seed)[1],]
fix(aha)
fix(aha)
fix(nonrankdata)
fix(aha)
names(aha)
rev(names(aha))
uia <- c("selectseparately", "alwaysincludclin", "featuremethod", "cvfoldind", "cvind", "dat")
nonrankdatafull <- expand.grid(selectseparately=unique(nonrankdata$selectseparately),
alwaysincludclin=unique(nonrankdata$selectseparately),
featuremethod=unique(nonrankdata$featuremethod),
cvfoldind=unique(nonrankdata$cvfoldind),
cvind=unique(nonrankdata$cvind),
dat=unique(nonrankdata$dat), stringsAsFactors = FALSE)
fix(nonrankdata)
fix(nonrankdatafull)
nonrankdatafull <- nonrankdatafull[,ncol(nonrankdatafull):1]
fix(nonrankdatafull)
nonrankdatafull <- expand.grid(selectseparately=sort(unique(nonrankdata$selectseparately)),
alwaysincludclin=sort(unique(nonrankdata$selectseparately)),
featuremethod=sort(unique(nonrankdata$featuremethod)),
cvfoldind=sort(unique(nonrankdata$cvfoldind)),
cvind=sort(unique(nonrankdata$cvind)),
dat=sort(unique(nonrankdata$dat)), stringsAsFactors = FALSE)
nonrankdatafull <- nonrankdatafull[,ncol(nonrankdatafull):1]
fix(nonrankdatafull)
dim(nonrankdatafull)
ui <- apply(nonrankdatafull, 1, paste, collapse="_")
head(ui)
temp1 <- apply(nonrankdatafull, 1, paste, collapse="_")
fix(nonrankdata)
temp2 <- apply(nonrankdata[,3:8], 1, paste, collapse="_")
head(temp2)
fix(nonrankdata)
temp2 <- apply(nonrankdata[,2:7], 1, paste, collapse="_")
fix(temp2)
head(temp2)
all(temp2 %in% temp1)
all(temp1 %in% temp2)
names(nonrankdata)
fillupind <- sapply(temp2, function(x) which(temp1==x))
head(fillupind)
nonrankdatafull$auc_svm <- nonrankdatafull$brier_svm <- nonrankdatafull$accuracy_svm <-
nonrankdatafull$auc_rf <- nonrankdatafull$brier_rf <- nonrankdatafull$accuracy_rf <- NA
nonrankdatafull$auc_svm[fillupind] <- nonrankdata$auc_svm
fix(nonrankdatafull)
nonrankdatafull$brier_svm[fillupind] <- nonrankdata$brier_svm
nonrankdatafull$accuracy_svm[fillupind] <- nonrankdata$accuracy_svm
nonrankdatafull$auc_rf[fillupind] <- nonrankdata$auc_rf
nonrankdatafull$brier_rf[fillupind] <- nonrankdata$brier_rf
nonrankdatafull$accuracy_rf[fillupind] <- nonrankdata$accuracy_rf
fix(nonrankdatafull)
head(nonrankdatafull)
?reshape
names(nonrankdatafull)[7:12]
datawide <- reshape(data=nonrankdatafull,idvar=c("dat", "cvind", "cvfoldind", "alwaysincludclin", "selectseparately"),
v.names = c("accuracy_rf", "brier_rf", "auc_rf", "accuracy_svm", "brier_svm", "auc_svm"),
timevar = "featuremethod",
direction="wide")
fix(datawide)
names(datawide)
eval(parse(text=paste("datawidesum <- ddply(datawide, .variables=c(\"dat\", \"alwaysincludclin\", \"selectseparately\"), .fun=summarise,", paste(paste(names(datawide)[-c(1:5)], " = mean(", names(results)[-c(1:3)], ", na.rm=TRUE)", sep=""), collapse=", "), ")", sep="")))
eval(parse(text=paste("datawidesum <- ddply(datawide, .variables=c(\"dat\", \"alwaysincludclin\", \"selectseparately\"), .fun=summarise,", paste(paste(names(datawide)[-c(1:5)], " = mean(", names(datawide)[-c(1:3)], ", na.rm=TRUE)", sep=""), collapse=", "), ")", sep="")))
library(dplyr)
eval(parse(text=paste("datawidesum <- ddply(datawide, .variables=c(\"dat\", \"alwaysincludclin\", \"selectseparately\"), .fun=summarise,", paste(paste(names(datawide)[-c(1:5)], " = mean(", names(datawide)[-c(1:3)], ", na.rm=TRUE)", sep=""), collapse=", "), ")", sep="")))
library("plyr")
eval(parse(text=paste("datawidesum <- ddply(datawide, .variables=c(\"dat\", \"alwaysincludclin\", \"selectseparately\"), .fun=summarise,", paste(paste(names(datawide)[-c(1:5)], " = mean(", names(datawide)[-c(1:3)], ", na.rm=TRUE)", sep=""), collapse=", "), ")", sep="")))
fix(datawidesum)
paste("datawidesum <- ddply(datawide, .variables=c(\"dat\", \"alwaysincludclin\", \"selectseparately\"), .fun=summarise,", paste(paste(names(datawide)[-c(1:5)], " = mean(", names(datawide)[-c(1:3)], ", na.rm=TRUE)", sep=""), collapse=", "), ")", sep="")
fix(datawide)
names(datawide)
eval(parse(text=paste("datawidesum <- ddply(datawide, .variables=c(\"dat\", \"alwaysincludclin\", \"selectseparately\"), .fun=summarise,", paste(paste(names(datawide)[-c(1:5)], " = mean(", names(datawide)[-c(1:5)], ", na.rm=TRUE)", sep=""), collapse=", "), ")", sep="")))
fix(datawidesum)
datawidesum$accuracy_rf.ga
is.na(datawidesum$accuracy_rf.ga[1])
dim(datawidesum)
complete.cases(datawidesum)
ui <-datawidesum[complete.cases(datawidesum),]
fix(ui)
grep("accuracy_", names(ui))
grep("accuracy_", names(ui), value=TRUE)
grep("accuracy_rf", names(ui), value=TRUE)
boxplopt(ui[,grep("accuracy_rf", names(ui))])
boxplot(ui[,grep("accuracy_rf", names(ui))])
boxplot(ui[,grep("auc_rf", names(ui))])
boxplot(ui[,grep("brier_rf", names(ui))])
boxplot(ui[,grep("accuracy_svm", names(ui))])
boxplot(ui[,grep("auc_xvm", names(ui))])
boxplot(ui[,grep("auc_svm", names(ui))])
boxplot(ui[,grep("brier_xvm", names(ui))])
boxplot(ui[,grep("brier_svm", names(ui))])
set.seed(1234)
fix(datawide)
dim(datawide)
dim(datawide)/4
fix(datawide)
fix(datawide)
dim(datawide)/4/15
names(datawide)
datawideimp <- datawide
set.seed(1234)
library("missForest")
datawideimp <- datawide
datawideimp[datawide$alwaysincludclin==0 & datawide$selectseparately==0,-(1:5)] <- missForest(datawide[datawide$alwaysincludclin==0 & datawide$selectseparately==0,-(1:5)], ntree=200)$ximp
fix(datawideimp)
datawideimp[datawide$alwaysincludclin==0 & datawide$selectseparately==1,-(1:5)] <- missForest(datawide[datawide$alwaysincludclin==0 & datawide$selectseparately==1,-(1:5)], ntree=200)$ximp
datawideimp[datawide$alwaysincludclin==1 & datawide$selectseparately==0,-(1:5)] <- missForest(datawide[datawide$alwaysincludclin==1 & datawide$selectseparately==0,-(1:5)], ntree=200)$ximp
datawideimp[datawide$alwaysincludclin==1 & datawide$selectseparately==1,-(1:5)] <- missForest(datawide[datawide$alwaysincludclin==1 & datawide$selectseparately==1,-(1:5)], ntree=200)$ximp
fix(datawideimp)
eval(parse(text=paste("datawideimpsum <- ddply(datawideimp, .variables=c(\"dat\", \"alwaysincludclin\", \"selectseparately\"), .fun=summarise,", paste(paste(names(datawideimp)[-c(1:5)], " = mean(", names(datawideimp)[-c(1:5)], ", na.rm=TRUE)", sep=""), collapse=", "), ")", sep="")))
uiimp <-datawideimpsum[complete.cases(datawideimpsum),]
boxplot(uiimp[,grep("accuracy_rf", names(uiimp))])
par(mfrow=c(1,2))
boxplot(ui[,grep("accuracy_rf", names(ui))])
boxplot(uiimp[,grep("accuracy_rf", names(uiimp))])
par(mfrow=c(1,1))
par(mfrow=c(1,2))
boxplot(ui[,grep("auc_rf", names(ui))])
boxplot(uiimp[,grep("auc_rf", names(uiimp))])
par(mfrow=c(1,1))
par(mfrow=c(1,2))
boxplot(ui[,grep("brier_rf", names(ui))])
boxplot(uiimp[,grep("brier_rf", names(uiimp))])
par(mfrow=c(1,1))
par(mfrow=c(1,2))
boxplot(ui[,grep("auc_rf", names(ui))])
boxplot(uiimp[,grep("auc_rf", names(uiimp))])
par(mfrow=c(1,1))
par(mfrow=c(1,2))
boxplot(ui[,grep("accuracy_svm", names(ui))])
boxplot(uiimp[,grep("accuracy_svm", names(uiimp))])
par(mfrow=c(1,1))
par(mfrow=c(1,2))
boxplot(ui[,grep("auc_svm", names(ui))])
boxplot(uiimp[,grep("auc_svm", names(uiimp))])
par(mfrow=c(1,1))
par(mfrow=c(1,2))
boxplot(ui[,grep("accuracy_svm", names(ui))])
boxplot(uiimp[,grep("accuracy_svm", names(uiimp))])
par(mfrow=c(1,1))
par(mfrow=c(1,2))
boxplot(ui[,grep("brier_svm", names(ui))])
boxplot(uiimp[,grep("brier_svm", names(uiimp))])
par(mfrow=c(1,1))
par(mfrow=c(1,2))
boxplot(ui[,grep("auc_svm", names(ui))])
boxplot(uiimp[,grep("auc_svm", names(uiimp))])
par(mfrow=c(1,1))
di(uiimp)
dim(uiimp)
dim(ui)
dim(uiimp)
boxplot(uiimp[,grep("accuracy_rf", names(uiimp))])
boxplot(uiimp[,grep("auc_rf", names(uiimp))])
boxplot(uiimp[,grep("brier_rf", names(uiimp))])
boxplot(uiimp[,grep("accuracy_rf", names(uiimp))])
boxplot(uiimp[,grep("accuracy_svm", names(uiimp))])
boxplot(uiimp[,grep("auc_svm", names(uiimp))])
boxplot(uiimp[,grep("brier_svm", names(uiimp))])
boxplot(uiimp[uiimp$alwaysincludclin==0 & uiimp$selectseparately==0,grep("accuracy_rf", names(uiimp))])
boxplot(uiimp[uiimp$alwaysincludclin==0 & uiimp$selectseparately==0,grep("auc_rf", names(uiimp))])
boxplot(uiimp[uiimp$alwaysincludclin==0 & uiimp$selectseparately==0,grep("auc_rf", names(uiimp))])
boxplot(uiimp[uiimp$alwaysincludclin==0 & uiimp$selectseparately==0,grep("auc_svm", names(uiimp))])
boxplot(uiimp[uiimp$alwaysincludclin==0 & uiimp$selectseparately==0,grep("auc_rf", names(uiimp))])
boxplot(uiimp[uiimp$alwaysincludclin==0 & uiimp$selectseparately==0,grep("auc_svm", names(uiimp))])
boxplot(uiimp[uiimp$alwaysincludclin==0 & uiimp$selectseparately==0,grep("auc_rf", names(uiimp))])
boxplot(uiimp[uiimp$alwaysincludclin==0 & uiimp$selectseparately==0,grep("auc_svm", names(uiimp))])
boxplot(uiimp[uiimp$alwaysincludclin==0 & uiimp$selectseparately==1,grep("auc_rf", names(uiimp))])
boxplot(uiimp[uiimp$alwaysincludclin==0 & uiimp$selectseparately==1,grep("auc_svm", names(uiimp))])
names(datawideimp)
paste(names(datawideimp), collapse="\", \")
)
")"
""
paste(names(datawideimp), collapse="\", \"")
cat(paste(names(datawideimp), collapse="\", \""), "\n")
names(nonrankdatafull)
?reshape
unqie(nonrankdatafull$featuremethod)
unique(nonrankdatafull$featuremethod)
nonrankdata <- reshape(datawideimp, varying=list(c("accuracy_rf.ga", "accuracy_rf.lasso", "accuracy_rf.rfe"),
c("brier_rf.ga", "brier_rf.lasso", "brier_rf.rfe"),
c("auc_rf.ga", "auc_rf.lasso", "auc_rf.rfe"),
c("accuracy_svm.ga", "accuracy_svm.lasso", "accuracy_svm.rfe"),
c("brier_svm.ga", "brier_svm.lasso", "brier_svm.rfe"),
c("auc_svm.ga", "auc_svm.lasso", "auc_svm.rfe")),
v.names=c("accuracy_rf", "brier_rf", "auc_rf", "accuracy_svm", "brier_svm", "auc_svm"),
timevar="featuremethod", times=c("ga", "lasso", "rfe"),
direction="long")
load("Z:/nonrankdata.RData")
nonrankdataimp <- reshape(datawideimp, varying=list(c("accuracy_rf.ga", "accuracy_rf.lasso", "accuracy_rf.rfe"),
c("brier_rf.ga", "brier_rf.lasso", "brier_rf.rfe"),
c("auc_rf.ga", "auc_rf.lasso", "auc_rf.rfe"),
c("accuracy_svm.ga", "accuracy_svm.lasso", "accuracy_svm.rfe"),
c("brier_svm.ga", "brier_svm.lasso", "brier_svm.rfe"),
c("auc_svm.ga", "auc_svm.lasso", "auc_svm.rfe")),
v.names=c("accuracy_rf", "brier_rf", "auc_rf", "accuracy_svm", "brier_svm", "auc_svm"),
timevar="featuremethod", times=c("ga", "lasso", "rfe"),
direction="long")
dim(nonrankdata)
dim(nonrankdataimp)
fix(nonrankdata)
fix(nonrankdataimp)
names(nonrankdataimp)
names(datawideimp)
boxplot(nonrankdataimp[nonrankdataimp$featuremethod=="ga",]$auc_rf, datawideimp$auc_rf.ga)
boxplot(nonrankdataimp[nonrankdataimp$featuremethod=="lasso",]$auc_rf, datawideimp$auc_rf.lasso)
boxplot(nonrankdataimp[nonrankdataimp$featuremethod=="rfe",]$auc_rf, datawideimp$auc_rf.rfe)
boxplot(nonrankdataimp[nonrankdataimp$featuremethod=="ga",]$accuracy_rf, datawideimp$accuracy_rf.ga)
boxplot(nonrankdataimp[nonrankdataimp$featuremethod=="lasso",]$accuracy_rf, datawideimp$accuracy_rf.lasso)
boxplot(nonrankdataimp[nonrankdataimp$featuremethod=="rfe",]$accuracy_rf, datawideimp$accuracy_rf.rfe)
save(nonrankdataimp, file="Z:/nonrankdataimp.RData")
rm(list=ls());gc()
load("Z:/nonrankdata.RData")
nonrankdatafull <- expand.grid(selectseparately=sort(unique(nonrankdata$selectseparately)),
alwaysincludclin=sort(unique(nonrankdata$selectseparately)),
featuremethod=sort(unique(nonrankdata$featuremethod)),
cvfoldind=sort(unique(nonrankdata$cvfoldind)),
cvind=sort(unique(nonrankdata$cvind)),
dat=sort(unique(nonrankdata$dat)), stringsAsFactors = FALSE)
nonrankdatafull <- nonrankdatafull[,ncol(nonrankdatafull):1]
temp1 <- apply(nonrankdatafull, 1, paste, collapse="_")
temp2 <- apply(nonrankdata[,2:7], 1, paste, collapse="_")
fillupind <- sapply(temp2, function(x) which(temp1==x))
nonrankdatafull$auc_svm <- nonrankdatafull$brier_svm <- nonrankdatafull$accuracy_svm <-
nonrankdatafull$auc_rf <- nonrankdatafull$brier_rf <- nonrankdatafull$accuracy_rf <- NA
nonrankdatafull$auc_svm[fillupind] <- nonrankdata$auc_svm
nonrankdatafull$brier_svm[fillupind] <- nonrankdata$brier_svm
nonrankdatafull$accuracy_svm[fillupind] <- nonrankdata$accuracy_svm
nonrankdatafull$auc_rf[fillupind] <- nonrankdata$auc_rf
nonrankdatafull$brier_rf[fillupind] <- nonrankdata$brier_rf
nonrankdatafull$accuracy_rf[fillupind] <- nonrankdata$accuracy_rf
# Impute missing data:
datawide <- reshape(data=nonrankdatafull,idvar=c("dat", "cvind", "cvfoldind", "alwaysincludclin", "selectseparately"),
v.names = c("accuracy_rf", "brier_rf", "auc_rf", "accuracy_svm", "brier_svm", "auc_svm"),
timevar = "featuremethod",
direction="wide")
set.seed(1234)
library("missForest")
datawideimp <- datawide
datawideimp[datawide$alwaysincludclin==0 & datawide$selectseparately==0,-(1:5)] <- missForest(datawide[datawide$alwaysincludclin==0 & datawide$selectseparately==0,-(1:5)], ntree=200)$ximp
datawideimp[datawide$alwaysincludclin==0 & datawide$selectseparately==1,-(1:5)] <- missForest(datawide[datawide$alwaysincludclin==0 & datawide$selectseparately==1,-(1:5)], ntree=200)$ximp
datawideimp[datawide$alwaysincludclin==1 & datawide$selectseparately==0,-(1:5)] <- missForest(datawide[datawide$alwaysincludclin==1 & datawide$selectseparately==0,-(1:5)], ntree=200)$ximp
datawideimp[datawide$alwaysincludclin==1 & datawide$selectseparately==1,-(1:5)] <- missForest(datawide[datawide$alwaysincludclin==1 & datawide$selectseparately==1,-(1:5)], ntree=200)$ximp
nonrankdataimp <- reshape(datawideimp, varying=list(c("accuracy_rf.ga", "accuracy_rf.lasso", "accuracy_rf.rfe"),
c("brier_rf.ga", "brier_rf.lasso", "brier_rf.rfe"),
c("auc_rf.ga", "auc_rf.lasso", "auc_rf.rfe"),
c("accuracy_svm.ga", "accuracy_svm.lasso", "accuracy_svm.rfe"),
c("brier_svm.ga", "brier_svm.lasso", "brier_svm.rfe"),
c("auc_svm.ga", "auc_svm.lasso", "auc_svm.rfe")),
v.names=c("accuracy_rf", "brier_rf", "auc_rf", "accuracy_svm", "brier_svm", "auc_svm"),
timevar="featuremethod", times=c("ga", "lasso", "rfe"),
direction="long")
save(nonrankdataimp, file="Z:/nonrankdataimp.RData")
fix(nonrankdataimp)
names(datawideimp)
boxplot(datawideimp$auc_rf.ga)
boxplot(datawideimp$auc_rf.ga[datawideimp$alwaysincludclin==1 & datawideimp$selectseparately==1])
boxplot(datawideimp$auc_rf.ga[datawideimp$alwaysincludclin==1 & datawideimp$selectseparately==1],
nonrankdataimp$auc_rf[nonrankdataimp$featuremethod=="ga" & nonrankdataimp$alwaysincludclin==1 & nonrankdataimp$selectseparately==1])
boxplot(datawideimp$auc_rf.lasso[datawideimp$alwaysincludclin==1 & datawideimp$selectseparately==1],
nonrankdataimp$auc_rf[nonrankdataimp$featuremethod=="lasso" & nonrankdataimp$alwaysincludclin==1 & nonrankdataimp$selectseparately==1])
rm(list=ls());gc()
load("Z:/p.ad_nonrankmethod.RData")
ls()
p.ad_nonrankmethod
load("Z:/p_nonrankmethod.RData")
p_nonrankmethod
library(FSelector)
?relief
load("Z:/Projects/SideProjects/Yingxia/VariableSelectionMultiOmicsData/SecondRevision/asdf/p.ad_nonrankmethod_2.RData")
ls()
p.ad_nonrankmethod
load("Z:/Projects/SideProjects/Yingxia/VariableSelectionMultiOmicsData/SecondRevision/asdf/change_p.ad_nonrankmethod_2.RData")
ls()
p.ad_nonrankmethod
citation()
9*3+2*6+4
ls()
load("Z:/nonrankdataimp_2.Rda")
load("Z:/nonrankdataimp_2.RData")
ls()
dim(nonrankdataimp)
2*2*15
270/6
2*2*15*3
2*2*15*3*3*5
4*2*2
403.25+18.40
403.20+18.40
load("Z:/Projects/SideProjects/BlockwiseMissing/PaperCode/MitFoldwiseRF/BWM-Article/Docs/scenariogrid_foldwiseRF.Rda")
ls()
dim(scenariogrid)
remaininds <- c(8, 98, 160, 169, 188, 220, 250, 259, 278, 280, 298, 310,
340, 349, 358, 368, 386, 388, 400, 401, 430, 439, 458, 461,
464, 476, 478, 480, 486, 490, 515, 520, 524, 529, 534, 548,
551, 554, 562, 566, 568, 580, 596, 610, 613, 614, 619, 624,
638, 641, 642, 650, 652, 656, 658, 660, 661, 664, 670, 671,
686, 700, 702, 709, 714, 718, 728, 731, 733, 737, 742, 746,
748, 754, 756, 760, 776, 790, 799, 803, 804, 806, 814, 817,
818, 821, 831, 832, 833, 836, 838, 842, 844, 850, 866, 878,
880, 883, 885, 886, 889, 893, 894, 904, 908, 911, 922, 926,
928, 931, 934, 940, 956, 968, 970, 972, 973, 976, 979, 983,
984, 991, 994, 998, 1001, 1012, 1016, 1018, 1021, 1024, 1030,
1038, 1041, 1046, 1058, 1060, 1061, 1062, 1063, 1066, 1069,
1070, 1073, 1074, 1084, 1088, 1091, 1102, 1106, 1108, 1111,
1114, 1119, 1120, 1128, 1136, 1148, 1149, 1150, 1151, 1152,
1153, 1156, 1159, 1162, 1163, 1164, 1174, 1178, 1181, 1192,
1196, 1198, 1201, 1204, 1209, 1210, 1218, 1226, 1238, 1240,
1241, 1242, 1243, 1246, 1249, 1252, 1253, 1254, 1261, 1264,
1268, 1271, 1282, 1286, 1288, 1291, 1294, 1299, 1300)
remaininds2 <- c(8, 98, 160, 168, 169, 188, 220, 250, 258, 259, 274, 278, 282,
298, 310, 340, 348, 349, 358, 368, 372, 386, 388, 400, 430,
438, 439, 458, 476, 478, 490, 520, 528, 529, 548, 550, 562,
566, 568, 580, 596, 610, 618, 619, 624, 633, 638, 640, 652,
656, 658, 670, 686, 700, 704, 708, 709, 714, 723, 728, 730,
742, 746, 748, 760, 776, 790, 798, 799, 803, 804, 813, 814,
818, 820, 821, 832, 836, 838, 839, 850, 852, 866, 880, 888,
889, 893, 894, 903, 904, 908, 910, 911, 916, 922, 926, 928,
931, 940, 946, 956, 970, 972, 978, 979, 983, 984, 993, 994,
998, 1000, 1001, 1012, 1016, 1018, 1021, 1030, 1046, 1060,
1061, 1062, 1068, 1069, 1073, 1074, 1083, 1084, 1088, 1090,
1091, 1102, 1106, 1108, 1111, 1119, 1120, 1136, 1150, 1151,
1152, 1158, 1159, 1163, 1164, 1173, 1174, 1178, 1180, 1181,
1192, 1196, 1198, 1201, 1209, 1210, 1226, 1232, 1240, 1241,
1242, 1248, 1249, 1253, 1254, 1261, 1263, 1264, 1268, 1270,
1271, 1282, 1286, 1288, 1291, 1299, 130)
length(remainds2)
length(remaininds2)
length(remaininds)
library(measures)
PPV
TP
set.seed(1234)
xtr <- sample(1:4, size=100, replace=TRUE)
xest <- sample(1:4, size=100, replace=TRUE)
TP1 <- ifelse(xtr==xest & xtr==1, 1, 0)
TP1
set.seed(1234)
xtr <- sample(1:3, size=100, replace=TRUE)
xest <- sample(1:3, size=100, replace=TRUE)
TP1 <- ifelse(xtr==xest & xtr==1, 1, 0)
TP1
xtr[TP1==1]
xest[TP1==1]
set.seed(1234)
xtr <- sample(1:3, size=100, replace=TRUE)
xest <- sample(1:3, size=100, replace=TRUE)
TP1 <- ifelse(xtr==xest & xtr==1, 1, 0)
TP2 <- ifelse(xtr==xest & xtr==2, 1, 0)
TP3 <- ifelse(xtr==xest & xtr==3, 1, 0)
TP4 <- ifelse(xtr==xest & xtr==4, 1, 0)
TP2
TP1
TP2
TP3
TP4
set.seed(1234)
xtr <- sample(1:3, size=100, replace=TRUE)
xest <- sample(1:3, size=100, replace=TRUE)
TP1 <- ifelse(xtr==xest & xtr==1, 1, 0)
TP2 <- ifelse(xtr==xest & xtr==2, 1, 0)
TP3 <- ifelse(xtr==xest & xtr==3, 1, 0)
TN1 <- ifelse(xest!=1 & xtr!=1, 1, 0)
TN2 <- ifelse(xest!=2 & xtr!=2, 1, 0)
TN3 <- ifelse(xest!=3 & xtr!=3, 1, 0)
TN1
TN2
TN3
FP1 <- ifelse(xest==1 & xtr!=1, 1, 0)
FP2 <- ifelse(xest==2 & xtr!=2, 1, 0)
FP3 <- ifelse(xest==3 & xtr!=3, 1, 0)
FP1
FP2
set.seed(1234)
xtr <- sample(1:3, size=100, replace=TRUE)
xest <- sample(1:3, size=100, replace=TRUE)
TP1 <- ifelse(xtr==xest & xtr==1, 1, 0)
TP2 <- ifelse(xtr==xest & xtr==2, 1, 0)
TP3 <- ifelse(xtr==xest & xtr==3, 1, 0)
TN1 <- ifelse(xest!=1 & xtr!=1, 1, 0)
TN2 <- ifelse(xest!=2 & xtr!=2, 1, 0)
TN3 <- ifelse(xest!=3 & xtr!=3, 1, 0)
FP1 <- ifelse(xest==1 & xtr!=1, 1, 0)
FP2 <- ifelse(xest==2 & xtr!=2, 1, 0)
FP3 <- ifelse(xest==3 & xtr!=3, 1, 0)
FN1 <- ifelse(xest!=1 & xtr==1, 1, 0)
FN2 <- ifelse(xest!=2 & xtr==2, 1, 0)
FN3 <- ifelse(xest!=3 & xtr==3, 1, 0)
(sum(TP1) + sum(TP2) + sum(TP3))/(sum(TP1) + sum(TP2) + sum(TP3) + sum(FP1) + sum(FP2) + sum(FP3))
(sum(TP1)/(sum(TP1) + sum(FP1)) + sum(TP2)/(sum(TP2) + sum(FP2)) + sum(TP3)/(sum(TP3) + sum(FP3)))/3
toupper("Kiritchenko")
toupper("CaiHofmann2007")
toupper("Cesa-Bianchi2006")
(2/3)*1 + (1/3)*1.3
(2/3)*1 + (1/3)*1.7
library("xtable")
# NOT RUN {
## Load example dataset
data(tli)
## Demonstrate data.frame
tli.table <- xtable(tli[1:20, ])
tli.table
- [ ] Please **add helpful comments** to your code:
- [ ] Each user-defined function must be documented including all function arguments and returned objects.
---
09
--9
---9
----9
-----------------------------9
---------------------------------9
------------------------------------9
install.packages("HieRanFor", repos="http://R-Forge.R-project.org")
nchar("if(data.table::between(Betas[1], quantile(matriz_amostras_uniforme[,1],probs = 0.025),quantile(matriz_amostras_uniforme[,1],probs = 0.975))){Cont_Cobertura_uniforme[1]=Cont_Cobertura_uniforme[1]+1}")
114 + 67
85.50 + 66.40 + 89.90
72/3
82103/536
19 + 60 + 25
setwd("Z:/Projects/DESTATIS/PredErrorComplex/PPerfEstComplex")
source("./Simulations/ClustData/functions.R")
simulation(niter=100, N=10, ni=5, beta=c(2, 0, 0), sdbinter=1, sdbslope=2, sdeps=1, type="norm", fixed=TRUE)
