ti2 <- Sys.time()
as.numeric(difftime(ti2, ti1, unit="secs"))
source("./Simulations/ClustData/functions.R")
ti1 <- Sys.time()
set.seed(123456)
bla <- simulation(niter=1, N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=1, fixed="first", method="rf")
ti2 <- Sys.time()
as.numeric(difftime(ti2, ti1, unit="secs"))
simd <- simuldata(N=50, ni=50, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=1, sdeps=1, fixed="none")
simd <- simuldata(N=50, ni=50, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=1, sdeps=1, fixed="none")$dataset
dim(simd)
head(simd)
simd$index <- NULL
head(simd)
simd <- simuldata(N=50, ni=50, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=1, sdeps=1, fixed="none")$dataset
simd$index <- NULL
simd <- simuldata(N=50, ni=50, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=1, sdeps=1, fixed="none")$dataset
simd$index <- NULL
dim(simd)
# Define the task for the top-down classification rule:
task = as_task_regr(y ~ ., data = simd)
# Initialize the learner for the top-down classification rule:
learner = lrn("regr.ranger")
learner$param_set$values = list(num.threads=1)
# Train a model using the above learner for a subset of the task:
learner$train(task)
ti1 <- Sys.time()
learner$train(task)ti2 <- Sys.time()
ti1 <- Sys.time()
learner$train(task)
ti2 <- Sys.time()
as.numeric(difftime(ti2, ti1, unit="secs"))
simd <- simuldata(N=200, ni=50, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=1, sdeps=1, fixed="none")$dataset
simd$index <- NULL
# Define the task for the top-down classification rule:
task = as_task_regr(y ~ ., data = simd)
# Initialize the learner for the top-down classification rule:
learner = lrn("regr.ranger")
learner$param_set$values = list(num.threads=1)
# Train a model using the above learner for a subset of the task:
ti1 <- Sys.time()
learner$train(task)
ti2 <- Sys.time()
as.numeric(difftime(ti2, ti1, unit="secs"))
simd <- simuldata(N=200, ni=50, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=1, sdeps=1, fixed="none")$dataset
simd$index <- NULL
# Define the task for the top-down classification rule:
task = as_task_regr(y ~ ., data = simd)
# Initialize the learner for the top-down classification rule:
learner = lrn("regr.ranger")
learner$param_set$values = list(num.threads=1)
# Train a model using the above learner for a subset of the task:
ti1 <- Sys.time()
learner$train(task)
ti2 <- Sys.time()
as.numeric(difftime(ti2, ti1, unit="secs"))
simd <- simuldata(N=200, ni=50, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=1, sdeps=1, fixed="none")$dataset
simd$index <- NULL
# Define the task for the top-down classification rule:
task = as_task_regr(y ~ ., data = simd)
# Initialize the learner for the top-down classification rule:
learner = lrn("regr.ranger")
# learner$param_set$values = list(num.threads=1)
# Train a model using the above learner for a subset of the task:
ti1 <- Sys.time()
learner$train(task)
ti2 <- Sys.time()
as.numeric(difftime(ti2, ti1, unit="secs"))
ui <- ranger(y ~ ., data=simd)
ti1 <- Sys.time()
ui <- ranger(y ~ ., data=simd)
ti2 <- Sys.time()
as.numeric(difftime(ti2, ti1, unit="secs"))
ti1 <- Sys.time()
ui <- ranger(y ~ ., data=simd, num.threads = 1)
ti2 <- Sys.time()
as.numeric(difftime(ti2, ti1, unit="secs"))
scenariogrid <- expand.grid(fixed=c("none", "first", "second"), sdbinter=c(1,0), sdbslope=c(1,0), sdeps=c(1,0.7), ni=c(5,25), N=c(10,50), stringsAsFactors = TRUE)
scenariogrid <- scenariogrid[,ncol(scenariogrid):1, drop=FALSE]
set.seed(1234)
dim(scenariogrid)
50*2/3
50*0.8
10Ãœ0.25*0.8
10*0.25*0.8
10*25*0.8
10*25*2/3
source("./Simulations/ClustData/functions.R")
ti1 <- Sys.time()
set.seed(123456)
casefirstrf1 <- simulation(niter=2, N=10, ni=25, beta=c(2, 0, 0), sdbinter=1, sdbslope=0, sdeps=1, fixed="first", method="rf")
traceback()
source("./Simulations/ClustData/functions.R")
ti1 <- Sys.time()
set.seed(123456)
casefirstrf1 <- simulation(niter=2, N=10, ni=25, beta=c(2, 0, 0), sdbinter=1, sdbslope=0, sdeps=1, fixed="first", method="rf")
ti2 <- Sys.time()
as.numeric(difftime(ti2, ti1, unit="secs"))
ti1 <- Sys.time()
set.seed(123456)
casefirstrf2 <- simulation(niter=2, N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=1, fixed="first", method="rf")
ti2 <- Sys.time()
as.numeric(difftime(ti2, ti1, unit="secs"))
casefirstrf1
casefirstrf2
ti1 <- Sys.time()
set.seed(123456)
casefirstrf1 <- simulation(niter=10, N=10, ni=25, beta=c(2, 0, 0), sdbinter=1, sdbslope=0, sdeps=1, fixed="first", method="rf")
ti2 <- Sys.time()
as.numeric(difftime(ti2, ti1, unit="secs"))
ti1 <- Sys.time()
set.seed(123456)
casefirstrf2 <- simulation(niter=10, N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=1, fixed="first", method="rf")
ti2 <- Sys.time()
as.numeric(difftime(ti2, ti1, unit="secs"))
casefirst1
casefirst2
ti1 <- Sys.time()
set.seed(123456)
casefirstrf1_2 <- simulation(niter=10, N=10, ni=25, beta=c(2, 0, 0), sdbinter=1, sdbslope=0, sdeps=0.7, fixed="first", method="rf")
ti2 <- Sys.time()
as.numeric(difftime(ti2, ti1, unit="secs"))
ti1 <- Sys.time()
set.seed(123456)
casefirstrf2_2 <- simulation(niter=10, N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=0.7, fixed="first", method="rf")
ti2 <- Sys.time()
as.numeric(difftime(ti2, ti1, unit="secs"))
# Make table of settings:
scenariogrid <- expand.grid(iter=1:100, fixed=c("none", "first", "second"), sdeps=c(1,0.7), sdbslope=c(1,0), sdbinter=c(1,0), ni=c(5,25), N=c(10,50), stringsAsFactors = TRUE)
scenariogrid <- scenariogrid[,ncol(scenariogrid):1, drop=FALSE]
set.seed(1234)
seeds <- sample(1000:10000000, size=nrow(scenariogrid)
scenariogrid$seed <- rep(seeds, each=length(method))
# Make table of settings:
scenariogrid <- expand.grid(iter=1:100, fixed=c("none", "first", "second"), sdeps=c(1,0.7), sdbslope=c(1,0), sdbinter=c(1,0), ni=c(5,25), N=c(10,50), stringsAsFactors = TRUE)
scenariogrid <- scenariogrid[,ncol(scenariogrid):1, drop=FALSE]
set.seed(1234)
seeds <- sample(1000:10000000, size=nrow(scenariogrid)
scenariogrid$seed <- rep(seeds, each=length(method))
# Make table of settings:
scenariogrid <- expand.grid(iter=1:100, fixed=c("none", "first", "second"), sdeps=c(1,0.7), sdbslope=c(1,0), sdbinter=c(1,0), ni=c(5,25), N=c(10,50), stringsAsFactors = TRUE)
scenariogrid <- scenariogrid[,ncol(scenariogrid):1, drop=FALSE]
set.seed(1234)
seeds <- sample(1000:10000000, size=nrow(scenariogrid)
scenariogrid$seed <- rep(seeds, each=length(method))
# Make table of settings:
scenariogrid <- expand.grid(iter=1:100, fixed=c("none", "first", "second"), sdeps=c(1,0.7), sdbslope=c(1,0), sdbinter=c(1,0), ni=c(5,25), N=c(10,50), stringsAsFactors = TRUE)
scenariogrid <- scenariogrid[,ncol(scenariogrid):1, drop=FALSE]
set.seed(1234)
seeds <- sample(1000:10000000, size=nrow(scenariogrid))
scenariogrid$seed <- rep(seeds, each=length(method))
# Make table of settings:
scenariogrid <- expand.grid(iter=1:100, fixed=c("none", "first", "second"), sdeps=c(1,0.7), sdbslope=c(1,0), sdbinter=c(1,0), ni=c(5,25), N=c(10,50), stringsAsFactors = TRUE)
scenariogrid <- scenariogrid[,ncol(scenariogrid):1, drop=FALSE]
set.seed(1234)
seeds <- sample(1000:10000000, size=nrow(scenariogrid))
scenariogrid$seed <- seeds
head(scenariogrid)
names(scenariogrid)
aha <- names(scenariogrid)
ah <- paste0(aha, " <- scenariogrid$", aha, "[iter]")
ah
for(i in seq(along=ah))
cat(ah[i], "\n")
boxplot(casefirstrf1)
boxplot(c(casefirstrf1, casefirstrf1_2)
)
ti1 <- Sys.time()
set.seed(123456)
casefirstrf1_2 <- simulation(niter=10, N=10, ni=25, beta=c(2, 0, 0), sdbinter=1, sdbslope=0, sdeps=0.5, fixed="first", method="rf")
ti2 <- Sys.time()
as.numeric(difftime(ti2, ti1, unit="secs"))
ti1 <- Sys.time()
set.seed(123456)
casefirstrf2_2 <- simulation(niter=10, N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=0.5, fixed="first", method="rf")
ti2 <- Sys.time()
as.numeric(difftime(ti2, ti1, unit="secs"))
boxplot(c(casefirstrf1, casefirstrf1_2))
boxplot(c(casefirstrf2, casefirstrf2_2))
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=1, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=1, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=1, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=1, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=1, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=1, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=0.5, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=0.5, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=0.5, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=0.5, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=0.5, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=0.5, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=0.5, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=0.5, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=0.5, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=0.5, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=0.5, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=0.5, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=0.5, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=0.5, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=0.3, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=0.3, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=0.1, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=0, sdbslope=0, sdeps=0.1, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=0, sdbslope=0, sdeps=0.1, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=0, sdbslope=0, sdeps=0.5, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=0, sdbslope=0, sdeps=0.5, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=0, sdbslope=0, sdeps=0.5, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=0, sdbslope=0, sdeps=0.5, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=0, sdbslope=0, sdeps=0.5, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=0, sdbslope=0, sdeps=0.5, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=0, sdbslope=0, sdeps=0.5, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=0, sdbslope=0, sdeps=0.5, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=0, sdbslope=0, sdeps=0.5, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=0, sdbslope=0, sdeps=1, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=0, sdbslope=0, sdeps=1, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=0, sdbslope=0, sdeps=1, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=0, sdbslope=0, sdeps=1, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
simdata <- simuldata(N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=0, sdbslope=0, sdeps=1, fixed="first")$dataset
ypredsrf <- rep(NA, nrow(simdata))
for(i in seq(along=unique(simdata$index))) {
model <- ranger(y ~ ., data=simdata[simdata$index!=i,-ncol(simdata)])
ypredsrf[simdata$index==i] <- predict(model, data=simdata[simdata$index==i,-ncol(simdata)])$predictions
}
plot(simdata$y, ypredsrf)
cor(simdata$y, ypredsrf)
bla <- simulation(niter=1, N=10, ni=25, beta=c(1, 1, -1, 0, 0), sdbinter=1, sdbslope=0, sdeps=1, fixed="first", method="rf")
bla
dim(scenariogrid)
getwd()
# Make table of settings:
scenariogrid <- expand.grid(iter=1:100, fixed=c("none", "first", "second"), sdeps=c(1,0.5), sdbslope=c(1,0), sdbinter=c(1,0), ni=c(5,25), N=c(10,50), stringsAsFactors = TRUE)
scenariogrid <- scenariogrid[,ncol(scenariogrid):1, drop=FALSE]
set.seed(1234)
seeds <- sample(1000:10000000, size=nrow(scenariogrid))
scenariogrid$seed <- seeds
set.seed(1234)
reorderind <- sample(1:nrow(scenariogrid))
scenariogrid <- scenariogrid[reorderind,,drop=FALSE]
rownames(scenariogrid) <- NULL
source("./simulations/clustdata/functions.R")
evaluatesetting(1)
evaluatesetting(1)
N
ni
sdeps
?difftime
