# Set the canvas size
plot(1,1, xlim=c(0,10), ylim=c(0,10), type="n", ann=FALSE)
# Draw the head
polygon(x=c(4,6,6,4), y=c(7,7,9,9), density=20, col="lightgrey")
# Draw the eyes
points(4,8.5, pch=1, cex=1, col="black")
points(6,8.5, pch=1, cex=1, col="black")
# Draw the nose
points(5,8, pch=3, cex=1, col="black")
# Draw the mouth
lines(c(4.5, 5.5), c(7.5, 7.5), lwd=2, col="black")
# Draw the mustache
lines(c(4.5, 5.5), c(7, 7), lwd=2, col="black")
lines(c(5.5, 6.5), c(7, 7), lwd=2, col="black")
# Draw the hair
polygon(x=c(3,5,7,7,5,3), y=c(9,9,8,7,6,6), density=20, col="black")
# Add a label
text(5,9.5, "Lemmy Kilmister", cex=1.5, col="black")
}
draw_lemmy()
dev.off()
draw_lemmy()
draw_lemmy <- function() {
# Set the canvas size
plot(1,1, xlim=c(0,10), ylim=c(0,10), type="n", ann=FALSE)
# Draw the head
polygon(x=c(4,6,6,4), y=c(7,7,9,9), density=20, col="lightgrey")
# Draw the eyes
points(4,8.5, pch=1, cex=1, col="black")
points(6,8.5, pch=1, cex=1, col="black")
# Draw the nose
points(5,8, pch=3, cex=1, col="black")
# Draw the mouth
lines(c(4.5, 5.5), c(7.5, 7.5), lwd=2, col="black")
# Draw the mustache
lines(c(4.5, 5.5), c(7, 7), lwd=2, col="black")
lines(c(5.5, 6.5), c(7, 7), lwd=2, col="black")
# Draw the cigarette
lines(c(4.8, 5.2), c(7.2, 7.2), lwd=1, col="grey")
points(5,7.2, pch=20, cex=0.5, col="orange")
# Draw the hair
polygon(x=c(3,5,7,7,5,3), y=c(9,9,8,7,6,6), density=20, col="black")
# Add a label
text(5,9.5, "Lemmy Kilmister", cex=1.5, col="black")
}
draw_lemmy()
draw_lemmy()
draw_lemmy()
draw_lemmy <- function() {
# Set the canvas size
plot(1,1, xlim=c(0,10), ylim=c(0,10), type="n", ann=FALSE)
# Draw the head
polygon(x=c(4,6,6,4), y=c(7,7,9,9), density=20, col="lightgrey")
# Draw the eyes
points(4,8.5, pch=1, cex=1, col="black")
points(6,8.5, pch=1, cex=1, col="black")
# Draw the nose
points(5,8, pch=3, cex=1, col="black")
# Draw the mouth
lines(c(4.5, 5.5), c(7.5, 7.5), lwd=2, col="black")
# Draw the mustache
lines(c(4.5, 5.5), c(7, 7), lwd=2, col="black")
lines(c(5.5, 6.5), c(7, 7), lwd=2, col="black")
# Draw the cigarette
lines(c(4.8, 5.2), c(7.2, 7.2), lwd=1, col="red")
points(5,7.2, pch=20, cex=0.5, col="red")
# Draw the hair
polygon(x=c(3,5,7,7,5,3), y=c(9,9,8,7,6,6), density=20, col="black")
# Add a label
text(5,9.5, "Lemmy Kilmister", cex=1.5, col="black")
}
draw_lemmy()
play_alle_meine_entchen <- function() {
library(tuneR)
# Define the notes and durations of the song
notes <- c(72, 71, 72, 72, 74, 74, 74, 76, 77, 77, 77, 77,
77, 75, 75, 75, 75, 75, 73, 73, 73, 73, 72, 72, 72, 72, 72, 71, 71, 71, 71, 71,
72, 72, 72, 72, 74, 74, 74, 76, 77, 77, 77, 77, 77, 75, 75, 75, 75, 75, 73, 73, 73, 73, 72, 72, 72, 72, 72)
durations <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5)
# Play the song
play(notes, durations, 1)
}
play_alle_meine_entchen()
install.packages("tuneR")
play_alle_meine_entchen()
?play
playAlleMeineEntchen <- function() {
library(tuneR)
# Define the notes and durations for the tune
notes <- c("C5", "C5", "D5", "C5", "F5", "E5", "C5", "C5", "D5", "C5", "G5", "F5",
"C5", "C5", "C6", "A5", "F5", "E5", "D5", "B4", "B4", "C5", "A4", "F4", "D4")
durations <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
# Play the tune
play(notes, durations)
}
playAlleMeineEntchen()
playAlleMeineEntchen <- function() {
library(tuneR)
# Define the notes and durations for the tune
notes <- c("C5", "C5", "D5", "C5", "F5", "E5", "C5", "C5", "D5", "C5", "G5", "F5",
"C5", "C5", "C6", "A5", "F5", "E5", "D5", "B4", "B4", "C5", "A4", "F4", "D4")
durations <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
# Convert the notes to a melody object
melody <- noteSeq(notes, durations)
# Play the tune
soundsc(melody, sampling=11025, sound=NULL, l=NULL)
}
playAlleMeineEntchen()
playAlleMeineEntchen <- function() {
library(tuneR)
# Define the notes and durations for the tune
notes <- c("C5", "C5", "D5", "C5", "F5", "E5", "C5", "C5", "D5", "C5", "G5", "F5",
"C5", "C5", "C6", "A5", "F5", "E5", "D5", "B4", "B4", "C5", "A4", "F4", "D4")
durations <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
# Convert the notes to a melody object
melody <- rep(NA, length(notes))
for (i in 1:length(notes)) {
melody[i] <- note(notes[i], durations[i])
}
# Play the tune
soundsc(melody, sampling=11025, sound=NULL, l=NULL)
}
playAlleMeineEntchen()
playAlleMeineEntchen <- function() {
library(tuneR)
# Define the notes and durations for the tune
notes <- c("C5", "C5", "D5", "C5", "F5", "E5", "C5", "C5", "D5", "C5", "G5", "F5",
"C5", "C5", "C6", "A5", "F5", "E5", "D5", "B4", "B4", "C5", "A4", "F4", "D4")
durations <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
# Convert the notes to a melody object
melody <- seq(notes, durations)
# Play the tune
soundsc(melody, sampling=11025, sound=NULL, l=NULL)
}
playAlleMeineEntchen()
playAlleMeineEntchen <- function() {
library(tuneR)
# Define the notes and durations for the tune
notes <- c("C5", "C5", "D5", "C5", "F5", "E5", "C5", "C5", "D5", "C5", "G5", "F5",
"C5", "C5", "C6", "A5", "F5", "E5", "D5", "B4", "B4", "C5", "A4", "F4", "D4")
durations <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
# Convert the notes to a melody object
melody <- tune(notes, durations)
# Play the tune
soundsc(melody, sampling=11025, sound=NULL, l=NULL)
}
playAlleMeineEntchen()
playAlleMeineEntchen <- function() {
library(tuneR)
# Define the notes and durations for the tune
notes <- c("C5", "C5", "D5", "C5", "F5", "E5", "C5", "C5", "D5", "C5", "G5", "F5",
"C5", "C5", "C6", "A5", "F5", "E5", "D5", "B4", "B4", "C5", "A4", "F4", "D4")
durations <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
# Convert the notes to a melody object
melody <- rep(NA, length(notes))
for (i in 1:length(notes)) {
melody[i] <- note(notes[i], durations[i])
}
# Play the tune
soundsc(melody, sampling=11025, sound=NULL, l=NULL)
}
playAlleMeineEntchen()
playAlleMeineEntchen <- function() {
library(Rmusic)
# Define the notes and durations for the tune
notes <- c("C5", "C5", "D5", "C5", "F5", "E5", "C5", "C5", "D5", "C5", "G5", "F5",
"C5", "C5", "C6", "A5", "F5", "E5", "D5", "B4", "B4", "C5", "A4", "F4", "D4")
durations <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
# Convert the notes to a melody object
melody <- rep(NA, length(notes))
for (i in 1:length(notes)) {
melody[i] <- note(notes[i], durations[i])
}
# Play the tune
play(melody)
}
pla
playAlleMeineEntchen()
install.packages("Rmusic")
devtools::install_github("keithmcnulty/Rmusic", build_vignettes = TRUE)
playAlleMeineEntchen()
playAlleMeineEntchen <- function() {
library(tuneR)
# Load the MIDI file
midi <- readMIDI("D:/alle_meine_entchen.mid")
# Play the MIDI file
play(midi)
}
playAlleMeineEntchen()
playAlleMeineEntchen <- function() {
library(tuneR)
# Load the MIDI file
midi <- readMidi("D:/alle_meine_entchen.mid")
# Play the MIDI file
play(midi)
}
playAlleMeineEntchen()
# Load the MIDI file
midi <- readMIDI("D:/alle_meine_entchen.mid")
# Load the MIDI file
midi <- readMidi("D:/alle_meine_entchen.mid")
class(midi)
midi
playAlleMeineEntchen <- function() {
library(tuneR)
# Load the MIDI file
midi <- readMidi("D:/alle_meine_entchen.mid")
# Play the MIDI file
play(midi)
}
library(ggplot2)
draw_rose <- function(n_petals = 8, center = c(0,0),
radius = 1, start_angle = 0) {
angles <- seq(start_angle, 360 + start_angle, length.out = n_petals*2 + 1)
df <- data.frame(angle = angles, radius = c(rep(radius, n_petals),
rep(radius/2, n_petals)))
df$x <- df$radius * cos(df$angle * pi/180) + center[1]
df$y <- df$radius * sin(df$angle * pi/180) + center[2]
ggplot() +
geom_path(data = df, aes(x = x, y = y)) +
coord_fixed()
}
draw_rose(n_petals = 16, center = c(1,1), radius = 2, start_angle = 45)
library(ggplot2)
draw_rose <- function(n_petals = 8, center = c(0,0),
radius = 1, start_angle = 0) {
angles <- seq(start_angle, 360 + start_angle, length.out = n_petals*2 + 1)
df <- data.frame(angle = angles, radius = c(rep(radius, n_petals),
rep(radius/2, n_petals)))
df$x <- df$radius * cos(df$angle * pi/180) + center[1]
df$y <- df$radius * sin(df$angle * pi/180) + center[2]
ggplot() +
geom_path(data = df, aes(x = x, y = y)) +
coord_fixed() +
theme_void()
}
draw_rose(n_petals = 16, center = c(1,1), radius = 2, start_angle = 45)
draw_rose <- function(n_petals = 8, center = c(0,0),
radius = 1, start_angle = 0) {
angles <- seq(start_angle, 360 + start_angle, length.out = n_petals*2)
df <- data.frame(angle = angles, radius = c(rep(radius, n_petals),
rep(radius/2, n_petals)))
df$x <- df$radius * cos(df$angle * pi/180) + center[1]
df$y <- df$radius * sin(df$angle * pi/180) + center[2]
ggplot() +
geom_path(data = df, aes(x = x, y = y)) +
coord_fixed() +
theme_void()
}
draw_rose(n_petals = 16, center = c(1,1), radius = 2, start_angle = 45)
draw_rose(n_petals = 16, center = c(1,1), radius = 2, start_angle = 45)
draw_rose(n_petals = 16, center = c(1,1), radius = 2, start_angle = 45)
draw_rose(n_petals = 10, center = c(1,1), radius = 2, start_angle = 45)
draw_rose(n_petals = 4, center = c(1,1), radius = 2, start_angle = 45)
draw_rose <- function(n_petals = 8, center = c(0,0), radius = 1) {
angles <- seq(0, 360, length.out = n_petals + 1)
x <- radius * cos(angles * pi/180) + center[1]
y <- radius * sin(angles * pi/180) + center[2]
data <- data.frame(x, y)
ggplot() +
geom_path(data = data, aes(x = x, y = y)) +
coord_fixed() +
theme_void()
}
draw_rose(n_petals = 16, center = c(1,1), radius = 2)
draw_rose <- function(n_petals = 8, center = c(0,0), radius = 1) {
angles <- seq(0, 360, length.out = n_petals + 1)
x <- radius * cos(angles * pi/180) + center[1]
y <- radius * sin(angles * pi/180) + center[2]
data <- data.frame(x, y)
ggplot() +
geom_path(data = data, aes(x = x, y = y)) +
coord_fixed() +
theme_void()
}
draw_rose(n_petals = 16, center = c(1,1), radius = 2)
draw_rose(n_petals = 10, center = c(1,1), radius = 2)
draw_rose(n_petals = 4, center = c(1,1), radius = 2)
draw_rose(n_petals = 160, center = c(1,1), radius = 2)
draw_rose <- function(n_petals = 8, center = c(0,0), radius = 1) {
angles <- seq(0, 360, length.out = n_petals + 1)
radii <- c(rep(radius, n_petals), radius/2)
df <- data.frame(angle = angles, radius = radii)
df$x <- df$radius * cos(df$angle * pi/180) + center[1]
df$y <- df$radius * sin(df$angle * pi/180) + center[2]
ggplot() +
geom_path(data = df, aes(x = x, y = y)) +
coord_fixed() +
theme_void()
}
draw_rose <- function(n_petals = 8, center = c(0,0), radius = 1) {
angles <- seq(0, 360, length.out = n_petals + 1)
radii <- c(rep(radius, n_petals), radius/2)
df <- data.frame(angle = angles, radius = radii)
df$x <- df$radius * cos(df$angle * pi/180) + center[1]
df$y <- df$radius * sin(df$angle * pi/180) + center[2]
ggplot() +
geom_path(data = df, aes(x = x, y = y)) +
coord_fixed() +
theme_void()
}
draw_rose(n_petals = 16, center = c(1,1), radius = 2)
draw_rose <- function(n_petals = 8, center = c(0,0), radius = 1) {
angles <- seq(0, 360, length.out = n_petals + 1)
radii <- c(rep(radius, n_petals), radius/2)
df <- data.frame(angle = angles, radius = radii)
df$x <- df$radius * cos(df$angle * pi/180) + center[1]
df$y <- df$radius * sin(df$angle * pi/180) + center[2]
ggplot() +
geom_path(data = df, aes(x = x, y = y)) +
coord_fixed() +
theme_void()
}
draw_rose(n_petals = 16, center = c(1,1), radius = 2)
nchar("iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii")
(19 + (10/60)) - (13 + (56/60))
(19 + (10/60)) - (13 + (56/60))  + 2
ls()
load("D:/Projects/DESTATIS/PredErrorComplex/PPerfEstComplex/simulations/hierpr/results/intermediate_results/results.Rda")
ls()
results
ls()
wd <- getwd()
ls()
load("D:/Projects/DESTATIS/PredErrorComplex/PPerfEstComplex/simulations/hierpr/results/intermediate_results/results.Rda")
ls()
sapply(results, class)
table(sapply(results, class))
head(results)
setwd("D:/Projects/DESTATIS/PredErrorComplex/PPerfEstComplex")
load("./simulations/hierpr/results/intermediate_results/scenariogrid.Rda")
load("./simulations/hierpr/results/intermediate_results/results.Rda")
head(scenariogrid)
head(scenariogrid)
reorderind <- order(scenariogrid$n, scenariogrid$iter)
scengrid <- scenariogrid[reorderind,]
results <- results[reorderind]
scengrid$seed_start <- scengrid$seed_res <- NULL
head(scengrid)
sapply(results, nrow)
rep(1:3, times=c(3,3,3))
scengrid <- scengrid[rep(1:nrow(scengrid), times=sapply(results, nrow)),]
head(scengrid, 12)
resultstab <- do.call("rbind", results)
head(resultstab, 12)
class(resultstab)
results <- scengrid
class(results)
results <- cbind(scengrid, resultstab)
head(results)
namesbefore <- c("n", "iter", "measure", "CV_vals", "stratCV_vals", "truth_vals")
ncol(results) == length(namesbefore) & all(names(results)==namesbefore)
namesbefore <- c("n", "iter", "measure", "CV_vals", "stratCV_vals", "truth_vals")
if(ncol(results) == length(namesbefore) & all(names(results)==namesbefore))
names(results) <- c("n", "iter", "measure", "CV", "stratCV", "truth")
head(results$CV)
head(results$measure)
cat(paste(unique(results$measure), collapse="\", \""), "\n")
results$n <- factor(results$n)
results$measure <- factor(results$measure, levels=c("hierf_micro", "hierf_macro", "hierpr_micro",
"hierpr_macro", "hierre_micro", "hierre_macro",
"hloss", "spath", "acc"))
results$CV_diff <- results$CV - results$truth
results$stratCV_diff <- results$stratCV - results$truth
head(results)
resultsum <- ddply(results, .variables=c("n", "measure"),
.fun=summarise, CV = mean(CV), stratCV = mean(stratCV),
truth = mean(truth), CV_absdiff = mean(abs(CV_diff)),
stratCV_absdiff = means(abs(stratCV_diff)))
library("plyr")
resultsum <- ddply(results, .variables=c("n", "measure"),
.fun=summarise, CV = mean(CV), stratCV = mean(stratCV),
truth = mean(truth), CV_absdiff = mean(abs(CV_diff)),
stratCV_absdiff = means(abs(stratCV_diff)))
resultsum <- ddply(results, .variables=c("n", "measure"),
.fun=summarise, CV = mean(CV), stratCV = mean(stratCV),
truth = mean(truth), CV_absdiff = mean(abs(CV_diff)),
stratCV_absdiff = mean(abs(stratCV_diff)))
resultsum
results <- reshape(results, varying=c("CV", "stratCV", "truth"),
v.names="value",
timevar="type", times=c("CV", "stratCV", "truth"),
direction="long")
head(results)
dim(results)
setwd("D:/Projects/DESTATIS/PredErrorComplex/PPerfEstComplex")
# Load and pre-process the results:
###################################
load("./simulations/hierpr/results/intermediate_results/scenariogrid.Rda")
load("./simulations/hierpr/results/intermediate_results/results.Rda")
reorderind <- order(scenariogrid$n, scenariogrid$iter)
scengrid <- scenariogrid[reorderind,]
results <- results[reorderind]
scengrid$seed_start <- scengrid$seed_res <- NULL
scengrid <- scengrid[rep(1:nrow(scengrid), times=sapply(results, nrow)),]
head(scengrid, 12)
head(scenariogrid)
resultstab <- do.call("rbind", results)
results <- scengrid
results <- cbind(scengrid, resultstab)
namesbefore <- c("n", "iter", "measure", "CV_vals", "stratCV_vals", "truth_vals")
if(ncol(results) == length(namesbefore) & all(names(results)==namesbefore))
names(results) <- c("n", "iter", "measure", "CV", "stratCV", "truth")
results$n <- factor(results$n)
results$measure <- factor(results$measure, levels=c("hierf_micro", "hierf_macro", "hierpr_micro",
"hierpr_macro", "hierre_micro", "hierre_macro",
"hloss", "spath", "acc"))
results$CV_diff <- results$CV - results$truth
results$stratCV_diff <- results$stratCV - results$truth
dim(results)
head(results)
results <- reshape(results, varying=list(c("CV", "stratCV", "truth"), c("CV_diff", "stratCV_diff")),
v.names=c("value", "diff"),
timevar="type", times=list(c("CV", "stratCV", "truth"), c("CV_diff", "stratCV_diff")),
direction="long")
results <- reshape(results, varying=c("CV", "stratCV", "truth", "CV_diff", "stratCV_diff"),
v.names="value",
timevar="type", times=c("CV", "stratCV", "truth", "CV_diff", "stratCV_diff"),
direction="long")
dim(results)
setwd("D:/Projects/DESTATIS/PredErrorComplex/PPerfEstComplex")
# Load and pre-process the results:
###################################
load("./simulations/hierpr/results/intermediate_results/scenariogrid.Rda")
load("./simulations/hierpr/results/intermediate_results/results.Rda")
reorderind <- order(scenariogrid$n, scenariogrid$iter)
scengrid <- scenariogrid[reorderind,]
results <- results[reorderind]
scengrid$seed_start <- scengrid$seed_res <- NULL
scengrid <- scengrid[rep(1:nrow(scengrid), times=sapply(results, nrow)),]
head(scengrid, 12)
head(scenariogrid)
resultstab <- do.call("rbind", results)
results <- scengrid
results <- cbind(scengrid, resultstab)
namesbefore <- c("n", "iter", "measure", "CV_vals", "stratCV_vals", "truth_vals")
if(ncol(results) == length(namesbefore) & all(names(results)==namesbefore))
names(results) <- c("n", "iter", "measure", "CV", "stratCV", "truth")
results$n <- factor(results$n)
results$measure <- factor(results$measure, levels=c("hierf_micro", "hierf_macro", "hierpr_micro",
"hierpr_macro", "hierre_micro", "hierre_macro",
"hloss", "spath", "acc"))
results$CV_diff <- results$CV - results$truth
results$stratCV_diff <- results$stratCV - results$truth
dim(results)
results <- reshape(results, varying=c("CV", "stratCV", "truth", "CV_diff", "stratCV_diff"),
v.names="value",
timevar="type", times=c("CV", "stratCV", "truth", "CV_diff", "stratCV_diff"),
direction="long")
dim(results)/5
head(results)
resultsum <- ddply(results, .variables=c("n", "measure", "type"),
.fun=summarise, value=mean(value))
resultsum
resultsum <- ddply(results[results$type %in% c("CV_diff", "stratCV_diff"),], .variables=c("n", "measure", "type"),
.fun=summarise, value=mean(value))
resultsum
resultsum <- ddply(results[results$type %in% c("CV_diff", "stratCV_diff"),], .variables=c("n", "measure", "type"),
.fun=summarise, value=mean(abs(value)))
resultsum
resultsum$type
resultsum$type <-factor(resultsum$type, levels=c("CV_diff", "stratCV_diff"))
head(resultsum)
p <- ggplot(data=resultsum, aes(x=n, y=value, fill=type)) +
geom_bar(stat="identity", position = "dodge") + facet_wrap(~measure)
library("ggplot2")
p <- ggplot(data=resultsum, aes(x=n, y=value, fill=type)) +
geom_bar(stat="identity", position = "dodge") + facet_wrap(~measure)
p
p <- ggplot(data=resultsum, aes(x=n, y=value, fill=type)) +
geom_bar(stat="identity", width=.5, position = "dodge") + facet_wrap(~measure)
p
p <- ggplot(data=resultsum, aes(x=n, y=value, fill=type)) + theme_bw() +
geom_bar(stat="identity", width=.5, position = "dodge") + facet_wrap(~measure)
p
resultsdiffsum <- ddply(results[results$type %in% c("CV_diff", "stratCV_diff"),], .variables=c("n", "measure", "type"),
.fun=summarise, value=mean(abs(value)))
resultsdiffsum
resultsdiffsum$type <-factor(resultsdiffsum$type, levels=c("CV_diff", "stratCV_diff"))
library("ggplot2")
p <- ggplot(data=resultsdiffsum, aes(x=n, y=value, fill=type)) + theme_bw() +
geom_bar(stat="identity", width=.5, position = "dodge") + facet_wrap(~measure)
p
resultssum <- ddply(results[results$type %in% c("CV", "stratCV", "truth"),], .variables=c("n", "measure", "type"),
.fun=summarise, value=mean(value))
library("ggplot2")
p <- ggplot(data=resultssum[resultssum$type=="truth",], aes(x=n, y=value)) + theme_bw() +
geom_bar(stat="identity", width=.5) + facet_wrap(~measure)
p
p <- ggplot(data=resultssum[resultssum$type=="truth",], aes(x=n, y=value)) + theme_bw() +
geom_bar(stat="identity", width=.5) + facet_wrap(~measure, scales="free_y")
p
p <- ggplot(data=resultsdiffsum, aes(x=n, y=value, fill=type)) + theme_bw() +
geom_bar(stat="identity", width=.5, position = "dodge") + facet_wrap(~measure)
p
resultsdiffvarsum <- ddply(results[results$type %in% c("CV_diff", "stratCV_diff"),], .variables=c("n", "measure", "type"),
.fun=summarise, var=var(value))
resultsdiffvarsum
resultsdiffvarsum$type <-factor(resultsdiffvarsum$type, levels=c("CV_diff", "stratCV_diff"))
library("ggplot2")
p <- ggplot(data=resultsdiffvarsum, aes(x=n, y=value, fill=type)) + theme_bw() +
geom_bar(stat="identity", width=.5, position = "dodge") + facet_wrap(~measure)
p
p <- ggplot(data=resultsdiffvarsum, aes(x=n, y=var, fill=type)) + theme_bw() +
geom_bar(stat="identity", width=.5, position = "dodge") + facet_wrap(~measure)
p
p <- ggplot(data=resultsdiffvarsum, aes(x=n, y=var, fill=type)) + theme_bw() +
geom_bar(stat="identity", width=.5, position = "dodge") + facet_wrap(~measure, scales="free_y")
p
