nchar("Multi-omics data are high-dimensional molecular data for which several types of omics data (e.g., RNA data) are available for the same patients. A common issue in prediction using multi-omics data is that some of the considered omics data types are only available for subsets of the patients.")
toupper("Existing prediction approaches for partly missing multi-omics covariate data")
toupper("Empirical comparison study of approaches for partly missing multi-omics covariate data")
toupper("Availability of data and materials")
toupper("Acknowledgements")
86/52.1429
86/365
1/(86/365)
1/(69/365)
1/((86+69)/365)
1/((86+69)/2/365)
70/52.1429
uia <- list.files("D:/Projects/SideProjects/BlockwiseMissing/GitHub_Code/bwm_article/compstudy_code_and_results/results/pl_approach")
uia
uia1 <- setdiff(uia, c("PL_Eval_ESCA_2_4_3.csv", "PL_Eval_ESCA_4_4_3.csv", "PL_Eval_ESCA_old.csv", "PL_Eval_PAAD_4_4_5.csv", "PL_Eval_PAAD_old.csv"))
uia2 <- c("PL_Eval_ESCA_2_4_3.csv", "PL_Eval_ESCA_4_4_3.csv", "PL_Eval_ESCA_old.csv", "PL_Eval_PAAD_4_4_5.csv", "PL_Eval_PAAD_old.csv")
uia1
uia2
for(in in seq(along=ui1))
cat(paste(uia, collapse=", "), "\n")
cat(paste(uia2, collapse=", "), "\n")
args <- commandArgs(trailingOnly = TRUE)
args
library(ordinalForest)
install.packages("ordinalForest")
library(ordinalForest)
ls()
rm(list=ls());gc()
13*100 + 78/7 + 13^3 + 1238794/233
13^3
78/11
1238794/233
1238794/233
draw_lemmy <- function() {
# Set the canvas size
plot(1,1, xlim=c(0,10), ylim=c(0,10), type="n", ann=FALSE)
# Draw the head
points(5,8, pch=20, cex=2)
# Draw the eyes
points(4,8.5, pch=1, cex=1)
points(6,8.5, pch=1, cex=1)
# Draw the nose
points(5,8, pch=3, cex=1)
# Draw the mouth
lines(c(4.5, 5.5), c(7.5, 7.5))
# Draw the mustache
lines(c(4.5, 5.5), c(7, 7))
lines(c(5.5, 6.5), c(7, 7))
# Draw the hair
points(3:7, 9, pch=20, cex=1)
# Add a label
text(5,9.5, "Lemmy Kilmister", cex=1.5)
}
draw_lemmy()
draw_lemmy <- function() {
# Set the canvas size
plot(1,1, xlim=c(0,10), ylim=c(0,10), type="n", ann=FALSE)
# Draw the head
points(5,8, pch=20, cex=2)
# Draw the eyes
points(4,8.5, pch=1, cex=1)
points(6,8.5, pch=1, cex=1)
# Draw the nose
points(5,8, pch=3, cex=1)
# Draw the mouth
lines(c(4.5, 5.5), c(7.5, 7.5))
# Draw the mustache
lines(c(4.5, 5.5), c(7, 7))
lines(c(5.5, 6.5), c(7, 7))
# Draw the hair
points(3:7, rep(9, 7), pch=20, cex=1)
# Add a label
text(5,9.5, "Lemmy Kilmister", cex=1.5)
}
draw_lemmy()
draw_lemmy <- function() {
# Set the canvas size
plot(1,1, xlim=c(0,10), ylim=c(0,10), type="n", ann=FALSE)
# Draw the head
points(5,8, pch=20, cex=2)
# Draw the eyes
points(4,8.5, pch=1, cex=1)
points(6,8.5, pch=1, cex=1)
# Draw the nose
points(5,8, pch=3, cex=1)
# Draw the mouth
lines(c(4.5, 5.5), c(7.5, 7.5))
# Draw the mustache
lines(c(4.5, 5.5), c(7, 7))
lines(c(5.5, 6.5), c(7, 7))
# Draw the hair
points(3:7, rep(9, 5), pch=20, cex=1)
# Add a label
text(5,9.5, "Lemmy Kilmister", cex=1.5)
}
draw_lemmy()
draw_lemmy <- function() {
# Set the canvas size
plot(1,1, xlim=c(0,10), ylim=c(0,10), type="n", ann=FALSE)
# Draw the head
polygon(x=c(4,6,6,4), y=c(7,7,9,9), density=20, col="lightgrey")
# Draw the eyes
points(4,8.5, pch=1, cex=1, col="black")
points(6,8.5, pch=1, cex=1, col="black")
# Draw the nose
points(5,8, pch=3, cex=1, col="black")
# Draw the mouth
lines(c(4.5, 5.5), c(7.5, 7.5), lwd=2, col="black")
# Draw the mustache
lines(c(4.5, 5.5), c(7, 7), lwd=2, col="black")
lines(c(5.5, 6.5), c(7, 7), lwd=2, col="black")
# Draw the hair
polygon(x=c(3,5,7,7,5,3), y=c(9,9,8,7,6,6), density=20, col="black")
# Add a label
text(5,9.5, "Lemmy Kilmister", cex=1.5, col="black")
}
draw_lemmy()
dev.off()
draw_lemmy()
draw_lemmy <- function() {
# Set the canvas size
plot(1,1, xlim=c(0,10), ylim=c(0,10), type="n", ann=FALSE)
# Draw the head
polygon(x=c(4,6,6,4), y=c(7,7,9,9), density=20, col="lightgrey")
# Draw the eyes
points(4,8.5, pch=1, cex=1, col="black")
points(6,8.5, pch=1, cex=1, col="black")
# Draw the nose
points(5,8, pch=3, cex=1, col="black")
# Draw the mouth
lines(c(4.5, 5.5), c(7.5, 7.5), lwd=2, col="black")
# Draw the mustache
lines(c(4.5, 5.5), c(7, 7), lwd=2, col="black")
lines(c(5.5, 6.5), c(7, 7), lwd=2, col="black")
# Draw the cigarette
lines(c(4.8, 5.2), c(7.2, 7.2), lwd=1, col="grey")
points(5,7.2, pch=20, cex=0.5, col="orange")
# Draw the hair
polygon(x=c(3,5,7,7,5,3), y=c(9,9,8,7,6,6), density=20, col="black")
# Add a label
text(5,9.5, "Lemmy Kilmister", cex=1.5, col="black")
}
draw_lemmy()
draw_lemmy()
draw_lemmy()
draw_lemmy <- function() {
# Set the canvas size
plot(1,1, xlim=c(0,10), ylim=c(0,10), type="n", ann=FALSE)
# Draw the head
polygon(x=c(4,6,6,4), y=c(7,7,9,9), density=20, col="lightgrey")
# Draw the eyes
points(4,8.5, pch=1, cex=1, col="black")
points(6,8.5, pch=1, cex=1, col="black")
# Draw the nose
points(5,8, pch=3, cex=1, col="black")
# Draw the mouth
lines(c(4.5, 5.5), c(7.5, 7.5), lwd=2, col="black")
# Draw the mustache
lines(c(4.5, 5.5), c(7, 7), lwd=2, col="black")
lines(c(5.5, 6.5), c(7, 7), lwd=2, col="black")
# Draw the cigarette
lines(c(4.8, 5.2), c(7.2, 7.2), lwd=1, col="red")
points(5,7.2, pch=20, cex=0.5, col="red")
# Draw the hair
polygon(x=c(3,5,7,7,5,3), y=c(9,9,8,7,6,6), density=20, col="black")
# Add a label
text(5,9.5, "Lemmy Kilmister", cex=1.5, col="black")
}
draw_lemmy()
play_alle_meine_entchen <- function() {
library(tuneR)
# Define the notes and durations of the song
notes <- c(72, 71, 72, 72, 74, 74, 74, 76, 77, 77, 77, 77,
77, 75, 75, 75, 75, 75, 73, 73, 73, 73, 72, 72, 72, 72, 72, 71, 71, 71, 71, 71,
72, 72, 72, 72, 74, 74, 74, 76, 77, 77, 77, 77, 77, 75, 75, 75, 75, 75, 73, 73, 73, 73, 72, 72, 72, 72, 72)
durations <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5,
1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5, 0.5)
# Play the song
play(notes, durations, 1)
}
play_alle_meine_entchen()
install.packages("tuneR")
play_alle_meine_entchen()
?play
playAlleMeineEntchen <- function() {
library(tuneR)
# Define the notes and durations for the tune
notes <- c("C5", "C5", "D5", "C5", "F5", "E5", "C5", "C5", "D5", "C5", "G5", "F5",
"C5", "C5", "C6", "A5", "F5", "E5", "D5", "B4", "B4", "C5", "A4", "F4", "D4")
durations <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
# Play the tune
play(notes, durations)
}
playAlleMeineEntchen()
playAlleMeineEntchen <- function() {
library(tuneR)
# Define the notes and durations for the tune
notes <- c("C5", "C5", "D5", "C5", "F5", "E5", "C5", "C5", "D5", "C5", "G5", "F5",
"C5", "C5", "C6", "A5", "F5", "E5", "D5", "B4", "B4", "C5", "A4", "F4", "D4")
durations <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
# Convert the notes to a melody object
melody <- noteSeq(notes, durations)
# Play the tune
soundsc(melody, sampling=11025, sound=NULL, l=NULL)
}
playAlleMeineEntchen()
playAlleMeineEntchen <- function() {
library(tuneR)
# Define the notes and durations for the tune
notes <- c("C5", "C5", "D5", "C5", "F5", "E5", "C5", "C5", "D5", "C5", "G5", "F5",
"C5", "C5", "C6", "A5", "F5", "E5", "D5", "B4", "B4", "C5", "A4", "F4", "D4")
durations <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
# Convert the notes to a melody object
melody <- rep(NA, length(notes))
for (i in 1:length(notes)) {
melody[i] <- note(notes[i], durations[i])
}
# Play the tune
soundsc(melody, sampling=11025, sound=NULL, l=NULL)
}
playAlleMeineEntchen()
playAlleMeineEntchen <- function() {
library(tuneR)
# Define the notes and durations for the tune
notes <- c("C5", "C5", "D5", "C5", "F5", "E5", "C5", "C5", "D5", "C5", "G5", "F5",
"C5", "C5", "C6", "A5", "F5", "E5", "D5", "B4", "B4", "C5", "A4", "F4", "D4")
durations <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
# Convert the notes to a melody object
melody <- seq(notes, durations)
# Play the tune
soundsc(melody, sampling=11025, sound=NULL, l=NULL)
}
playAlleMeineEntchen()
playAlleMeineEntchen <- function() {
library(tuneR)
# Define the notes and durations for the tune
notes <- c("C5", "C5", "D5", "C5", "F5", "E5", "C5", "C5", "D5", "C5", "G5", "F5",
"C5", "C5", "C6", "A5", "F5", "E5", "D5", "B4", "B4", "C5", "A4", "F4", "D4")
durations <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
# Convert the notes to a melody object
melody <- tune(notes, durations)
# Play the tune
soundsc(melody, sampling=11025, sound=NULL, l=NULL)
}
playAlleMeineEntchen()
playAlleMeineEntchen <- function() {
library(tuneR)
# Define the notes and durations for the tune
notes <- c("C5", "C5", "D5", "C5", "F5", "E5", "C5", "C5", "D5", "C5", "G5", "F5",
"C5", "C5", "C6", "A5", "F5", "E5", "D5", "B4", "B4", "C5", "A4", "F4", "D4")
durations <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
# Convert the notes to a melody object
melody <- rep(NA, length(notes))
for (i in 1:length(notes)) {
melody[i] <- note(notes[i], durations[i])
}
# Play the tune
soundsc(melody, sampling=11025, sound=NULL, l=NULL)
}
playAlleMeineEntchen()
playAlleMeineEntchen <- function() {
library(Rmusic)
# Define the notes and durations for the tune
notes <- c("C5", "C5", "D5", "C5", "F5", "E5", "C5", "C5", "D5", "C5", "G5", "F5",
"C5", "C5", "C6", "A5", "F5", "E5", "D5", "B4", "B4", "C5", "A4", "F4", "D4")
durations <- c(1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1)
# Convert the notes to a melody object
melody <- rep(NA, length(notes))
for (i in 1:length(notes)) {
melody[i] <- note(notes[i], durations[i])
}
# Play the tune
play(melody)
}
pla
playAlleMeineEntchen()
install.packages("Rmusic")
devtools::install_github("keithmcnulty/Rmusic", build_vignettes = TRUE)
playAlleMeineEntchen()
playAlleMeineEntchen <- function() {
library(tuneR)
# Load the MIDI file
midi <- readMIDI("D:/alle_meine_entchen.mid")
# Play the MIDI file
play(midi)
}
playAlleMeineEntchen()
playAlleMeineEntchen <- function() {
library(tuneR)
# Load the MIDI file
midi <- readMidi("D:/alle_meine_entchen.mid")
# Play the MIDI file
play(midi)
}
playAlleMeineEntchen()
# Load the MIDI file
midi <- readMIDI("D:/alle_meine_entchen.mid")
# Load the MIDI file
midi <- readMidi("D:/alle_meine_entchen.mid")
class(midi)
midi
playAlleMeineEntchen <- function() {
library(tuneR)
# Load the MIDI file
midi <- readMidi("D:/alle_meine_entchen.mid")
# Play the MIDI file
play(midi)
}
library(ggplot2)
draw_rose <- function(n_petals = 8, center = c(0,0),
radius = 1, start_angle = 0) {
angles <- seq(start_angle, 360 + start_angle, length.out = n_petals*2 + 1)
df <- data.frame(angle = angles, radius = c(rep(radius, n_petals),
rep(radius/2, n_petals)))
df$x <- df$radius * cos(df$angle * pi/180) + center[1]
df$y <- df$radius * sin(df$angle * pi/180) + center[2]
ggplot() +
geom_path(data = df, aes(x = x, y = y)) +
coord_fixed()
}
draw_rose(n_petals = 16, center = c(1,1), radius = 2, start_angle = 45)
library(ggplot2)
draw_rose <- function(n_petals = 8, center = c(0,0),
radius = 1, start_angle = 0) {
angles <- seq(start_angle, 360 + start_angle, length.out = n_petals*2 + 1)
df <- data.frame(angle = angles, radius = c(rep(radius, n_petals),
rep(radius/2, n_petals)))
df$x <- df$radius * cos(df$angle * pi/180) + center[1]
df$y <- df$radius * sin(df$angle * pi/180) + center[2]
ggplot() +
geom_path(data = df, aes(x = x, y = y)) +
coord_fixed() +
theme_void()
}
draw_rose(n_petals = 16, center = c(1,1), radius = 2, start_angle = 45)
draw_rose <- function(n_petals = 8, center = c(0,0),
radius = 1, start_angle = 0) {
angles <- seq(start_angle, 360 + start_angle, length.out = n_petals*2)
df <- data.frame(angle = angles, radius = c(rep(radius, n_petals),
rep(radius/2, n_petals)))
df$x <- df$radius * cos(df$angle * pi/180) + center[1]
df$y <- df$radius * sin(df$angle * pi/180) + center[2]
ggplot() +
geom_path(data = df, aes(x = x, y = y)) +
coord_fixed() +
theme_void()
}
draw_rose(n_petals = 16, center = c(1,1), radius = 2, start_angle = 45)
draw_rose(n_petals = 16, center = c(1,1), radius = 2, start_angle = 45)
draw_rose(n_petals = 16, center = c(1,1), radius = 2, start_angle = 45)
draw_rose(n_petals = 10, center = c(1,1), radius = 2, start_angle = 45)
draw_rose(n_petals = 4, center = c(1,1), radius = 2, start_angle = 45)
draw_rose <- function(n_petals = 8, center = c(0,0), radius = 1) {
angles <- seq(0, 360, length.out = n_petals + 1)
x <- radius * cos(angles * pi/180) + center[1]
y <- radius * sin(angles * pi/180) + center[2]
data <- data.frame(x, y)
ggplot() +
geom_path(data = data, aes(x = x, y = y)) +
coord_fixed() +
theme_void()
}
draw_rose(n_petals = 16, center = c(1,1), radius = 2)
draw_rose <- function(n_petals = 8, center = c(0,0), radius = 1) {
angles <- seq(0, 360, length.out = n_petals + 1)
x <- radius * cos(angles * pi/180) + center[1]
y <- radius * sin(angles * pi/180) + center[2]
data <- data.frame(x, y)
ggplot() +
geom_path(data = data, aes(x = x, y = y)) +
coord_fixed() +
theme_void()
}
draw_rose(n_petals = 16, center = c(1,1), radius = 2)
draw_rose(n_petals = 10, center = c(1,1), radius = 2)
draw_rose(n_petals = 4, center = c(1,1), radius = 2)
draw_rose(n_petals = 160, center = c(1,1), radius = 2)
draw_rose <- function(n_petals = 8, center = c(0,0), radius = 1) {
angles <- seq(0, 360, length.out = n_petals + 1)
radii <- c(rep(radius, n_petals), radius/2)
df <- data.frame(angle = angles, radius = radii)
df$x <- df$radius * cos(df$angle * pi/180) + center[1]
df$y <- df$radius * sin(df$angle * pi/180) + center[2]
ggplot() +
geom_path(data = df, aes(x = x, y = y)) +
coord_fixed() +
theme_void()
}
draw_rose <- function(n_petals = 8, center = c(0,0), radius = 1) {
angles <- seq(0, 360, length.out = n_petals + 1)
radii <- c(rep(radius, n_petals), radius/2)
df <- data.frame(angle = angles, radius = radii)
df$x <- df$radius * cos(df$angle * pi/180) + center[1]
df$y <- df$radius * sin(df$angle * pi/180) + center[2]
ggplot() +
geom_path(data = df, aes(x = x, y = y)) +
coord_fixed() +
theme_void()
}
draw_rose(n_petals = 16, center = c(1,1), radius = 2)
draw_rose <- function(n_petals = 8, center = c(0,0), radius = 1) {
angles <- seq(0, 360, length.out = n_petals + 1)
radii <- c(rep(radius, n_petals), radius/2)
df <- data.frame(angle = angles, radius = radii)
df$x <- df$radius * cos(df$angle * pi/180) + center[1]
df$y <- df$radius * sin(df$angle * pi/180) + center[2]
ggplot() +
geom_path(data = df, aes(x = x, y = y)) +
coord_fixed() +
theme_void()
}
draw_rose(n_petals = 16, center = c(1,1), radius = 2)
nchar("iiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiiii")
(19 + (10/60)) - (13 + (56/60))
(19 + (10/60)) - (13 + (56/60))  + 2
ls()
load("D:/Projects/DESTATIS/PredErrorComplex/PPerfEstComplex/simulations/hierpr/results/intermediate_results/results.Rda")
ls()
results
ls()
wd <- getwd()
ls()
x1 <- 1:5
x2 <- 10:14
depp <- data.frame(x1=x1, x2=x2, ui=1234)
depp
setwd("D:/Projects/DESTATIS/PredErrorComplex/PPerfEstComplex")
load("./simulations/hierpr/results/intermediate_results/scenariogrid_2.Rda")
load("./simulations/hierpr/results/intermediate_results/results_2.Rda")
reorderind <- order(scenariogrid$n, scenariogrid$iter)
scengrid <- scenariogrid[reorderind,]
results <- results[reorderind]
scengrid$seed_start <- scengrid$seed_res <- NULL
scengrid <- scengrid[rep(1:nrow(scengrid), times=sapply(results, nrow)),]
head(scengrid, 12)
head(scenariogrid)
resultstab <- do.call("rbind", results)
results <- scengrid
results <- cbind(scengrid, resultstab)
names(results)
namesbefore <- c("n", "iter", "measure", "CV_vals", "stratCV_vals", "truth_vals", "ntest")
if(ncol(results) == length(namesbefore) & all(names(results)==namesbefore))
names(results) <- c("n", "iter", "measure", "CV", "stratCV", "truth", "ntest")
head(results)
results$n <- factor(results$n)
results$measure <- factor(results$measure, levels=c("acc", "hierpr_micro", "hierpr_macro",
"hierre_micro", "hierre_macro",
"hierf_micro", "hierf_macro",
"spath", "hloss"))
results$CV_diff <- results$CV - results$truth
results$stratCV_diff <- results$stratCV - results$truth
results$CV_absdiff <- abs(results$CV - results$truth)
results$stratCV_absdiff <- abs(results$stratCV - results$truth)
results$CV_percdiff <- 100*results$CV_diff/results$truth
results$stratCV_percdiff <- 100*results$stratCV_diff/results$truth
results$CV_percabsdiff <- 100*results$CV_absdiff/results$truth
results$stratCV_percabsdiff <- 100*results$stratCV_absdiff/results$truth
results <- reshape(results, varying=c("CV", "stratCV", "truth", "CV_diff", "stratCV_diff", "CV_absdiff", "stratCV_absdiff", "CV_percdiff",
"stratCV_percdiff", "CV_percabsdiff", "stratCV_percabsdiff"),
v.names="value",
timevar="type", times=c("CV", "stratCV", "truth", "CV_diff", "stratCV_diff", "CV_absdiff", "stratCV_absdiff", "CV_percdiff",
"stratCV_percdiff", "CV_percabsdiff", "stratCV_percabsdiff"),
direction="long")
library("plyr")
resultspercdiffvar <- ddply(results[results$type %in% c("CV_percdiff", "stratCV_percdiff"),], .variables=c("n", "measure", "type"),
.fun=summarise, var=var(value))
resultstemp <- results[results$type %in% c("CV", "stratCV", "truth"),]
resultstemp$type <-factor(resultstemp$type, levels=c("CV", "stratCV", "truth"))
labelstemp <- rep("", length(levels(resultstemp$n))*3)
labelstemp[seq(from=2, by=3, length=length(levels(resultstemp$n)))] <- levels(resultstemp$n)
library("ggplot2")
p <- ggplot(resultstemp, aes(x = interaction(type, n), y = value)) + theme_bw() +
geom_line(aes(group = interaction(iter, n)),
alpha = 0.5, colour = "darkgrey") +
geom_boxplot(aes(fill = type), alpha = 0.5) +
facet_wrap(~measure, scales="free_y") +
scale_x_discrete(labels = labelstemp) +
xlab("n") + ylab("Evaluation metric values") +
theme(axis.ticks.x=element_blank(),
axis.text=element_text(color="black"),
legend.position = "none")
p
ggsave("./Simulations/HierPr/Results/figures/hierpr_raw_values_2.pdf", width=9, height=9)
p <- ggplot(resultstemp, aes(x = interaction(type, n), y = value)) + theme_bw() +
geom_line(aes(group = interaction(iter, n)),
alpha = 0.5, colour = "darkgrey") +
geom_boxplot(aes(fill = type), alpha = 0.5) +
facet_wrap(~measure, scales="free_y") +
scale_x_discrete(labels = labelstemp) +
xlab("n") + ylab("Evaluation metric values") +
theme(axis.ticks.x=element_blank(),
axis.text=element_text(color="black"))
p
resultstemp <- results[results$type %in% c("CV_percdiff", "stratCV_percdiff"),]
resultstemp$type <-factor(resultstemp$type, levels=c("CV_percdiff", "stratCV_percdiff"))
p <- ggplot(data=resultstemp, aes(x=n, y=value, fill=type)) + theme_bw() +
geom_boxplot() + geom_hline(yintercept=0, linetype="dashed", color="blue") +
facet_wrap(~measure, scales="free_y") + ylab("Difference between estimated and true evaluation metric values divided by true values") +
theme(axis.title = element_text(color="black"), legend.position = "none")
p
ggsave("./Simulations/HierPr/Results/figures/hierpr_standardized_difference_2.pdf", width=9, height=9)
p <- ggplot(data=resultstemp, aes(x=n, y=value, fill=type)) + theme_bw() +
geom_boxplot() + geom_hline(yintercept=0, linetype="dashed", color="blue") +
facet_wrap(~measure, scales="free_y") + ylab("Difference between estimated and true evaluation metric values divided by true values") +
theme(axis.title = element_text(color="black"))
p
dim(results$ntest)
ls()
boxplot(results$ntest)
plot(results$n, results$ntest)
