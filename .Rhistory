cv$instantiate(task)
result_cv <- resample(task=task, learner=learner_temp, resampling=cv)
mse_cv <- result_cv$aggregate(msr("regr.mse"))
datacompl <- rbind(datatrain, datatest1, datatest2)
ntrain <- nrow(datatrain); ntest1 <- nrow(datatest1); ntest2 <- nrow(datatest2)
rm(datatrain, datatest1, datatest2); gc()
# Define the task for the top-down classification rule:
task <- as_task_regr(datacompl, target="y")
learner_temp$train(task, row_ids = 1:ntrain)
predictions <- learner_temp$predict(task, row_ids = (ntrain+1):(ntrain+ntest1))
mse_true1 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest1+1):(ntrain+ntest1+ntest2))
mse_true2 <- predictions$score(msr("regr.mse"))
mse_tempcv1
mse_tempcv2
mse_cv
mse_true1
mse_true2
seasonbreaks <- seq(0, 1, length=8)
seasonbreaks
seasonbreaks[1:6]
c(seasonbreaks[1:6], (seasonbreaks[6]+seasonbreaks[7])/2, seasonbreaks[7], (seasonbreaks[7]+seasonbreaks[8])/2, seasonbreaks[8])
seasonbreaks <- seq(0, 1, length=8)
seasonbreaks <- c(seasonbreaks[1:6], (seasonbreaks[6]+seasonbreaks[7])/2, seasonbreaks[7], (seasonbreaks[7]+seasonbreaks[8])/2, seasonbreaks[8])
length(seasonbreaks)
datatrain <- sim_dataset(seq(seasonbreaks[1], seasonbreaks[6], length=n),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest1_1 <- sim_dataset(rep(seasonbreaks[7], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest1_2 <- sim_dataset(rep(seasonbreaks[8], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest2_1 <- sim_dataset(rep(seasonbreaks[9], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest2_2 <- sim_dataset(rep(seasonbreaks[10], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
require("mlr3")
require("mlr3temporal")
require("mlr3verse")
# require("data.table")
#
# mse_cv3 <- numeric(niter)
# mse_cv3g <- numeric(niter)
if (method=="lm")
learner_temp <- lrn("regr.lm")
if (method=="rf")
learner_temp <- lrn("regr.ranger")
# lgr::get_logger("mlr3")$set_threshold("warn")
task <- as_task_regr(datatrain, target="y")
# task_i$set_col_roles(cols="index", remove_from="feature")
# subsamp0.8 <- rsmp("subsampling", repeats = 100, ratio = 0.8)
tempcv <- rsmp("custom")
tempcv$instantiate(task, train_sets1, test_sets1)
result_tempcv <- resample(task=task, learner=learner_temp, resampling=tempcv)
mse_tempcv1 <- result_tempcv$aggregate(msr("regr.mse"))
tempcv <- rsmp("custom")
tempcv$instantiate(task, train_sets2, test_sets2)
result_tempcv <- resample(task=task, learner=learner_temp, resampling=tempcv)
mse_tempcv2 <- result_tempcv$aggregate(msr("regr.mse"))
cv <- rsmp("repeated_cv", repeats = 10, folds = 5)
cv$instantiate(task)
result_cv <- resample(task=task, learner=learner_temp, resampling=cv)
mse_cv <- result_cv$aggregate(msr("regr.mse"))
datacompl <- rbind(datatrain, datatest1_1, datatest1_2, datatest2_1, datatest2_2)
ntrain <- nrow(datatrain); ntest1_1 <- nrow(datatest1_1); ntest1_2 <- nrow(ntest1_2)
ntest2_1 <- nrow(datatest2_1); ntest2_2 <- nrow(ntest2_2)
rm(datatrain, datatest1_1, datatest1_2, datatest2_1, datatest2_2); gc()
# Define the task for the top-down classification rule:
task <- as_task_regr(datacompl, target="y")
seasonbreaks <- seq(0, 1, length=8)
seasonbreaks <- c(seasonbreaks[1:6], (seasonbreaks[6]+seasonbreaks[7])/2, seasonbreaks[7], (seasonbreaks[7]+seasonbreaks[8])/2, seasonbreaks[8])
datatrain <- sim_dataset(seq(seasonbreaks[1], seasonbreaks[6], length=n),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest1_1 <- sim_dataset(rep(seasonbreaks[7], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest1_2 <- sim_dataset(rep(seasonbreaks[8], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest2_1 <- sim_dataset(rep(seasonbreaks[9], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest2_2 <- sim_dataset(rep(seasonbreaks[10], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
require("mlr3")
require("mlr3temporal")
require("mlr3verse")
# require("data.table")
#
# mse_cv3 <- numeric(niter)
# mse_cv3g <- numeric(niter)
if (method=="lm")
learner_temp <- lrn("regr.lm")
if (method=="rf")
learner_temp <- lrn("regr.ranger")
# lgr::get_logger("mlr3")$set_threshold("warn")
task <- as_task_regr(datatrain, target="y")
# task_i$set_col_roles(cols="index", remove_from="feature")
# subsamp0.8 <- rsmp("subsampling", repeats = 100, ratio = 0.8)
tempcv <- rsmp("custom")
tempcv$instantiate(task, train_sets1, test_sets1)
result_tempcv <- resample(task=task, learner=learner_temp, resampling=tempcv)
mse_tempcv1 <- result_tempcv$aggregate(msr("regr.mse"))
tempcv <- rsmp("custom")
tempcv$instantiate(task, train_sets2, test_sets2)
result_tempcv <- resample(task=task, learner=learner_temp, resampling=tempcv)
mse_tempcv2 <- result_tempcv$aggregate(msr("regr.mse"))
cv <- rsmp("repeated_cv", repeats = 10, folds = 5)
cv$instantiate(task)
result_cv <- resample(task=task, learner=learner_temp, resampling=cv)
mse_cv <- result_cv$aggregate(msr("regr.mse"))
datacompl <- rbind(datatrain, datatest1_1, datatest1_2, datatest2_1, datatest2_2)
ntrain <- nrow(datatrain); ntest1_1 <- nrow(datatest1_1); ntest1_2 <- nrow(ntest1_2)
ntest2_1 <- nrow(datatest2_1); ntest2_2 <- nrow(datatest2_2)
rm(datatrain, datatest1_1, datatest1_2, datatest2_1, datatest2_2); gc()
seasonbreaks <- seq(0, 1, length=8)
seasonbreaks <- c(seasonbreaks[1:6], (seasonbreaks[6]+seasonbreaks[7])/2, seasonbreaks[7], (seasonbreaks[7]+seasonbreaks[8])/2, seasonbreaks[8])
datatrain <- sim_dataset(seq(seasonbreaks[1], seasonbreaks[6], length=n),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest1_1 <- sim_dataset(rep(seasonbreaks[7], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest1_2 <- sim_dataset(rep(seasonbreaks[8], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest2_1 <- sim_dataset(rep(seasonbreaks[9], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest2_2 <- sim_dataset(rep(seasonbreaks[10], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
require("mlr3")
require("mlr3temporal")
require("mlr3verse")
# require("data.table")
#
# mse_cv3 <- numeric(niter)
# mse_cv3g <- numeric(niter)
if (method=="lm")
learner_temp <- lrn("regr.lm")
if (method=="rf")
learner_temp <- lrn("regr.ranger")
# lgr::get_logger("mlr3")$set_threshold("warn")
task <- as_task_regr(datatrain, target="y")
# task_i$set_col_roles(cols="index", remove_from="feature")
# subsamp0.8 <- rsmp("subsampling", repeats = 100, ratio = 0.8)
tempcv <- rsmp("custom")
tempcv$instantiate(task, train_sets1, test_sets1)
result_tempcv <- resample(task=task, learner=learner_temp, resampling=tempcv)
mse_tempcv1 <- result_tempcv$aggregate(msr("regr.mse"))
tempcv <- rsmp("custom")
tempcv$instantiate(task, train_sets2, test_sets2)
result_tempcv <- resample(task=task, learner=learner_temp, resampling=tempcv)
mse_tempcv2 <- result_tempcv$aggregate(msr("regr.mse"))
cv <- rsmp("repeated_cv", repeats = 10, folds = 5)
cv$instantiate(task)
result_cv <- resample(task=task, learner=learner_temp, resampling=cv)
mse_cv <- result_cv$aggregate(msr("regr.mse"))
datacompl <- rbind(datatrain, datatest1_1, datatest1_2, datatest2_1, datatest2_2)
ntrain <- nrow(datatrain); ntest1_1 <- nrow(datatest1_1); ntest1_2 <- nrow(datatest1_2)
ntest2_1 <- nrow(datatest2_1); ntest2_2 <- nrow(datatest2_2)
rm(datatrain, datatest1_1, datatest1_2, datatest2_1, datatest2_2); gc()
# Define the task for the top-down classification rule:
task <- as_task_regr(datacompl, target="y")
learner_temp$train(task, row_ids = 1:ntrain)
predictions <- learner_temp$predict(task, row_ids = (ntrain+1):(ntrain+ntest1_1))
mse_true1_1 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest1_1+1):(ntrain+ntest1_1+ntest1_2))
mse_true1_2 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest1_1+ntest1_2+1):(ntrain+ntest1_1+ntest1_2+ntest2_1))
mse_true2_1 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest1_1+ntest1_2+ntest2_1+1):(ntrain+ntest1_1+ntest1_2+ntest2_1+ntest2_2))
mse_true2_2 <- predictions$score(msr("regr.mse"))
mse_cv
mse_tempcv1
mse_tempcv2
mse_true1_1
mse_true1_2
mse_true2_1
mse_true2_2
mse_cv
mse_tempcv1
mse_tempcv2
mse_true1_1
mse_true1_2
mse_true2_1
mse_true2_2
train_sets1
test_sets1
train_sets2
test_sets2
seasonbreaks <- seq(0, 1, length=8)
seasonbreaks <- c(seasonbreaks[1:6], (seasonbreaks[6]+seasonbreaks[7])/2, seasonbreaks[7], (seasonbreaks[7]+seasonbreaks[8])/2, seasonbreaks[8])
datatrain <- sim_dataset(seq(seasonbreaks[1], seasonbreaks[6], length=n),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest_1 <- sim_dataset(rep(seasonbreaks[6], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest_2 <- sim_dataset(rep(seasonbreaks[7], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest_3 <- sim_dataset(rep(seasonbreaks[8], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest_4 <- sim_dataset(rep(seasonbreaks[9], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest_5 <- sim_dataset(rep(seasonbreaks[10], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
require("mlr3")
require("mlr3temporal")
require("mlr3verse")
# require("data.table")
#
# mse_cv3 <- numeric(niter)
# mse_cv3g <- numeric(niter)
if (method=="lm")
learner_temp <- lrn("regr.lm")
if (method=="rf")
learner_temp <- lrn("regr.ranger")
# lgr::get_logger("mlr3")$set_threshold("warn")
task <- as_task_regr(datatrain, target="y")
# task_i$set_col_roles(cols="index", remove_from="feature")
# subsamp0.8 <- rsmp("subsampling", repeats = 100, ratio = 0.8)
tempcv <- rsmp("custom")
tempcv$instantiate(task, train_sets1, test_sets1)
result_tempcv <- resample(task=task, learner=learner_temp, resampling=tempcv)
mse_tempcv1 <- result_tempcv$aggregate(msr("regr.mse"))
tempcv <- rsmp("custom")
tempcv$instantiate(task, train_sets2, test_sets2)
result_tempcv <- resample(task=task, learner=learner_temp, resampling=tempcv)
mse_tempcv2 <- result_tempcv$aggregate(msr("regr.mse"))
cv <- rsmp("repeated_cv", repeats = 10, folds = 5)
cv$instantiate(task)
result_cv <- resample(task=task, learner=learner_temp, resampling=cv)
mse_cv <- result_cv$aggregate(msr("regr.mse"))
datacompl <- rbind(datatrain, datatest_1, datatest_2, datatest_3, datatest_4, datatest_5)
ntrain <- nrow(datatrain); ntest_1 <- nrow(datatest_1); ntest_2 <- nrow(datatest_2)
ntest_3 <- nrow(datatest_3); ntest_4 <- nrow(datatest_4); ntest_5 <- nrow(datatest_5)
rm(datatrain, datatest1_1, datatest1_2, datatest2_1, datatest2_2); gc()
# Define the task for the top-down classification rule:
task <- as_task_regr(datacompl, target="y")
learner_temp$train(task, row_ids = 1:ntrain)
seasonbreaks <- seq(0, 1, length=8)
seasonbreaks <- c(seasonbreaks[1:6], (seasonbreaks[6]+seasonbreaks[7])/2, seasonbreaks[7], (seasonbreaks[7]+seasonbreaks[8])/2, seasonbreaks[8])
datatrain <- sim_dataset(seq(seasonbreaks[1], seasonbreaks[6], length=n),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest_1 <- sim_dataset(rep(seasonbreaks[6], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest_2 <- sim_dataset(rep(seasonbreaks[7], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest_3 <- sim_dataset(rep(seasonbreaks[8], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest_4 <- sim_dataset(rep(seasonbreaks[9], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest_5 <- sim_dataset(rep(seasonbreaks[10], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
require("mlr3")
require("mlr3temporal")
require("mlr3verse")
# require("data.table")
#
# mse_cv3 <- numeric(niter)
# mse_cv3g <- numeric(niter)
if (method=="lm")
learner_temp <- lrn("regr.lm")
if (method=="rf")
learner_temp <- lrn("regr.ranger")
# lgr::get_logger("mlr3")$set_threshold("warn")
task <- as_task_regr(datatrain, target="y")
# task_i$set_col_roles(cols="index", remove_from="feature")
# subsamp0.8 <- rsmp("subsampling", repeats = 100, ratio = 0.8)
tempcv <- rsmp("custom")
tempcv$instantiate(task, train_sets1, test_sets1)
result_tempcv <- resample(task=task, learner=learner_temp, resampling=tempcv)
mse_tempcv1 <- result_tempcv$aggregate(msr("regr.mse"))
tempcv <- rsmp("custom")
tempcv$instantiate(task, train_sets2, test_sets2)
result_tempcv <- resample(task=task, learner=learner_temp, resampling=tempcv)
mse_tempcv2 <- result_tempcv$aggregate(msr("regr.mse"))
cv <- rsmp("repeated_cv", repeats = 10, folds = 5)
cv$instantiate(task)
result_cv <- resample(task=task, learner=learner_temp, resampling=cv)
mse_cv <- result_cv$aggregate(msr("regr.mse"))
datacompl <- rbind(datatrain, datatest_1, datatest_2, datatest_3, datatest_4, datatest_5)
ntrain <- nrow(datatrain); ntest_1 <- nrow(datatest_1); ntest_2 <- nrow(datatest_2)
ntest_3 <- nrow(datatest_3); ntest_4 <- nrow(datatest_4); ntest_5 <- nrow(datatest_5)
rm(datatrain, datatest_1, datatest_2, datatest_3, datatest_4, datatest_5); gc()
# Define the task for the top-down classification rule:
task <- as_task_regr(datacompl, target="y")
learner_temp$train(task, row_ids = 1:ntrain)
predictions <- learner_temp$predict(task, row_ids = (ntrain+1):(ntrain+ntest_1))
mse_true_1 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+1):(ntrain+ntest_1+ntest_2))
mse_true_2 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+ntest_2+1):(ntrain+ntest_1+ntest_2+ntest_3))
mse_true_3 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+ntest_2+ntest_3+1):(ntrain+ntest_1+ntest_2+ntest_3+ntest_4))
mse_true_4 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+ntest_2+ntest_3+ntest_4+1):(ntrain+ntest_1+ntest_2+ntest_3+ntest_4+ntest_5))
mse_true_5 <- predictions$score(msr("regr.mse"))
mse_cv
mse_tempcv1
mse_tempcv2
mse_true_1
mse_true_2
mse_true_3
mse_true_4
mse_true_5
train_sets1#
test_sets1
list(train_sets1[length(train_sets1)])
train_sets1[length(train_sets1)]
seasonbreaks <- seq(0, 1, length=8)
seasonbreaks <- c(seasonbreaks[1:6], (seasonbreaks[6]+seasonbreaks[7])/2, seasonbreaks[7], (seasonbreaks[7]+seasonbreaks[8])/2, seasonbreaks[8])
datatrain <- sim_dataset(seq(seasonbreaks[1], seasonbreaks[6], length=n),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest_1 <- sim_dataset(rep(seasonbreaks[6], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest_2 <- sim_dataset(rep(seasonbreaks[7], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest_3 <- sim_dataset(rep(seasonbreaks[8], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest_4 <- sim_dataset(rep(seasonbreaks[9], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest_5 <- sim_dataset(rep(seasonbreaks[10], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
require("mlr3")
require("mlr3temporal")
require("mlr3verse")
# require("data.table")
#
# mse_cv3 <- numeric(niter)
# mse_cv3g <- numeric(niter)
if (method=="lm")
learner_temp <- lrn("regr.lm")
if (method=="rf")
learner_temp <- lrn("regr.ranger")
# lgr::get_logger("mlr3")$set_threshold("warn")
task <- as_task_regr(datatrain, target="y")
# task_i$set_col_roles(cols="index", remove_from="feature")
# subsamp0.8 <- rsmp("subsampling", repeats = 100, ratio = 0.8)
tempcv <- rsmp("custom")
tempcv$instantiate(task, train_sets1, test_sets1)
result_tempcv <- resample(task=task, learner=learner_temp, resampling=tempcv)
mse_tempcv1 <- result_tempcv$aggregate(msr("regr.mse"))
tempcv <- rsmp("custom")
tempcv$instantiate(task, train_sets2, test_sets2)
result_tempcv <- resample(task=task, learner=learner_temp, resampling=tempcv)
mse_tempcv2 <- result_tempcv$aggregate(msr("regr.mse"))
tempholdout <- rsmp("custom")
tempholdout$instantiate(task, train_sets1[length(train_sets1)], test_sets1[length(test_sets1)])
result_tempholdout <- resample(task=task, learner=learner_temp, resampling=tempholdout)
mse_tempholdout1 <- result_tempholdout$aggregate(msr("regr.mse"))
tempholdout <- rsmp("custom")
tempholdout$instantiate(task, train_sets2[length(train_sets2)], test_sets2[length(test_sets2)])
result_tempholdout <- resample(task=task, learner=learner_temp, resampling=tempholdout)
mse_tempholdout2 <- result_tempholdout$aggregate(msr("regr.mse"))
cv <- rsmp("repeated_cv", repeats = 10, folds = 5)
cv$instantiate(task)
result_cv <- resample(task=task, learner=learner_temp, resampling=cv)
mse_cv <- result_cv$aggregate(msr("regr.mse"))
datacompl <- rbind(datatrain, datatest_1, datatest_2, datatest_3, datatest_4, datatest_5)
ntrain <- nrow(datatrain); ntest_1 <- nrow(datatest_1); ntest_2 <- nrow(datatest_2)
ntest_3 <- nrow(datatest_3); ntest_4 <- nrow(datatest_4); ntest_5 <- nrow(datatest_5)
rm(datatrain, datatest_1, datatest_2, datatest_3, datatest_4, datatest_5); gc()
# Define the task for the top-down classification rule:
task <- as_task_regr(datacompl, target="y")
learner_temp$train(task, row_ids = 1:ntrain)
predictions <- learner_temp$predict(task, row_ids = (ntrain+1):(ntrain+ntest_1))
mse_true_1 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+1):(ntrain+ntest_1+ntest_2))
mse_true_2 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+ntest_2+1):(ntrain+ntest_1+ntest_2+ntest_3))
mse_true_3 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+ntest_2+ntest_3+1):(ntrain+ntest_1+ntest_2+ntest_3+ntest_4))
mse_true_4 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+ntest_2+ntest_3+ntest_4+1):(ntrain+ntest_1+ntest_2+ntest_3+ntest_4+ntest_5))
mse_true_5 <- predictions$score(msr("regr.mse"))
mse_cv
mse_tempcv1
mse_tempcv2
mse_tempholdout1
mse_tempholdout2
mse_true_1
mse_true_2
mse_true_3
mse_true_4
mse_true_5
train_sets1[length(train_sets1)]
test_sets1[length(test_sets1)]
class(test_sets1[length(test_sets1)])
seasonbreaks <- seq(0, 1, length=8)
seasonbreaks <- c(seasonbreaks[1:6], (seasonbreaks[6]+seasonbreaks[7])/2, seasonbreaks[7], (seasonbreaks[7]+seasonbreaks[8])/2, seasonbreaks[8])
datatrain <- sim_dataset(seq(seasonbreaks[1], seasonbreaks[6], length=n),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest_1 <- sim_dataset(rep(seasonbreaks[6], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest_2 <- sim_dataset(rep(seasonbreaks[7], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest_3 <- sim_dataset(rep(seasonbreaks[8], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest_4 <- sim_dataset(rep(seasonbreaks[9], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
datatest_5 <- sim_dataset(rep(seasonbreaks[10], 100000),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
require("mlr3")
require("mlr3temporal")
require("mlr3verse")
# require("data.table")
#
# mse_cv3 <- numeric(niter)
# mse_cv3g <- numeric(niter)
if (method=="lm")
learner_temp <- lrn("regr.lm")
if (method=="rf")
learner_temp <- lrn("regr.ranger")
# lgr::get_logger("mlr3")$set_threshold("warn")
task <- as_task_regr(datatrain, target="y")
# task_i$set_col_roles(cols="index", remove_from="feature")
# subsamp0.8 <- rsmp("subsampling", repeats = 100, ratio = 0.8)
tempcv <- rsmp("custom")
tempcv$instantiate(task, train_sets1, test_sets1)
result_tempcv <- resample(task=task, learner=learner_temp, resampling=tempcv)
mse_tempcv1 <- result_tempcv$aggregate(msr("regr.mse"))
tempcv <- rsmp("custom")
tempcv$instantiate(task, train_sets2, test_sets2)
result_tempcv <- resample(task=task, learner=learner_temp, resampling=tempcv)
mse_tempcv2 <- result_tempcv$aggregate(msr("regr.mse"))
tempholdout <- rsmp("custom")
tempholdout$instantiate(task, train_sets1[length(train_sets1)], test_sets1[length(test_sets1)])
result_tempholdout <- resample(task=task, learner=learner_temp, resampling=tempholdout)
mse_tempholdout1 <- result_tempholdout$aggregate(msr("regr.mse"))
tempholdout <- rsmp("custom")
tempholdout$instantiate(task, train_sets2[length(train_sets2)], test_sets2[length(test_sets2)])
result_tempholdout <- resample(task=task, learner=learner_temp, resampling=tempholdout)
mse_tempholdout2 <- result_tempholdout$aggregate(msr("regr.mse"))
learner_temp$train(task, row_ids = train_sets1[[length(train_sets1)]])
predictions <- learner_temp$predict(task, row_ids = test_sets1[[length(test_sets1)]])
mse_tempholdout1n <- predictions$score(msr("regr.mse"))
learner_temp$train(task, row_ids = train_sets2[[length(train_sets2)]])
predictions <- learner_temp$predict(task, row_ids = test_sets2[[length(test_sets2)]])
mse_tempholdout2n <- predictions$score(msr("regr.mse"))
cv <- rsmp("repeated_cv", repeats = 10, folds = 5)
cv$instantiate(task)
result_cv <- resample(task=task, learner=learner_temp, resampling=cv)
mse_cv <- result_cv$aggregate(msr("regr.mse"))
datacompl <- rbind(datatrain, datatest_1, datatest_2, datatest_3, datatest_4, datatest_5)
ntrain <- nrow(datatrain); ntest_1 <- nrow(datatest_1); ntest_2 <- nrow(datatest_2)
ntest_3 <- nrow(datatest_3); ntest_4 <- nrow(datatest_4); ntest_5 <- nrow(datatest_5)
rm(datatrain, datatest_1, datatest_2, datatest_3, datatest_4, datatest_5); gc()
# Define the task for the top-down classification rule:
task <- as_task_regr(datacompl, target="y")
learner_temp$train(task, row_ids = 1:ntrain)
predictions <- learner_temp$predict(task, row_ids = (ntrain+1):(ntrain+ntest_1))
mse_true_1 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+1):(ntrain+ntest_1+ntest_2))
mse_true_2 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+ntest_2+1):(ntrain+ntest_1+ntest_2+ntest_3))
mse_true_3 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+ntest_2+ntest_3+1):(ntrain+ntest_1+ntest_2+ntest_3+ntest_4))
mse_true_4 <- predictions$score(msr("regr.mse"))
predictions <- learner_temp$predict(task, row_ids = (ntrain+ntest_1+ntest_2+ntest_3+ntest_4+1):(ntrain+ntest_1+ntest_2+ntest_3+ntest_4+ntest_5))
mse_true_5 <- predictions$score(msr("regr.mse"))
mse_cv
mse_tempcv1
mse_tempcv2
mse_tempholdout1
mse_tempholdout2
mse_tempholdout1n
mse_tempholdout2n
mse_true_1
mse_true_2
mse_true_3
mse_true_4
mse_true_5
seasonbreaks <- seq(0, 1, length=8)
seasonbreaks <- c(seasonbreaks[1:6], (seasonbreaks[6]+seasonbreaks[7])/2, seasonbreaks[7], (seasonbreaks[7]+seasonbreaks[8])/2, seasonbreaks[8])
datatrain <- sim_dataset(seq(seasonbreaks[1], seasonbreaks[6], length=n),
x1muend=8, x2muend=4, x3muend=-8, ymuend=6, yvarend=6)
require("mlr3")
require("mlr3temporal")
require("mlr3verse")
# require("data.table")
#
# mse_cv3 <- numeric(niter)
# mse_cv3g <- numeric(niter)
if (method=="lm")
learner_temp <- lrn("regr.lm")
if (method=="rf")
learner_temp <- lrn("regr.ranger")
# lgr::get_logger("mlr3")$set_threshold("warn")
task <- as_task_regr(datatrain, target="y")
# task_i$set_col_roles(cols="index", remove_from="feature")
# subsamp0.8 <- rsmp("subsampling", repeats = 100, ratio = 0.8)
tempcv <- rsmp("custom")
tempcv$instantiate(task, train_sets1, test_sets1)
result_tempcv <- resample(task=task, learner=learner_temp, resampling=tempcv)
mse_tempcv1 <- result_tempcv$aggregate(msr("regr.mse"))
tempcv <- rsmp("custom")
tempcv$instantiate(task, train_sets2, test_sets2)
result_tempcv <- resample(task=task, learner=learner_temp, resampling=tempcv)
mse_tempcv2 <- result_tempcv$aggregate(msr("regr.mse"))
tempholdout <- rsmp("custom")
tempholdout$instantiate(task, train_sets1[length(train_sets1)], test_sets1[length(test_sets1)])
result_tempholdout <- resample(task=task, learner=learner_temp, resampling=tempholdout)
mse_tempholdout1 <- result_tempholdout$aggregate(msr("regr.mse"))
tempholdout <- rsmp("custom")
tempholdout$instantiate(task, train_sets2[length(train_sets2)], test_sets2[length(test_sets2)])
result_tempholdout <- resample(task=task, learner=learner_temp, resampling=tempholdout)
mse_tempholdout2 <- result_tempholdout$aggregate(msr("regr.mse"))
learner_temp$train(task, row_ids = train_sets1[[length(train_sets1)]])
predictions <- learner_temp$predict(task, row_ids = test_sets1[[length(test_sets1)]])
mse_tempholdout1n <- predictions$score(msr("regr.mse"))
learner_temp$train(task, row_ids = train_sets2[[length(train_sets2)]])
predictions <- learner_temp$predict(task, row_ids = test_sets2[[length(test_sets2)]])
mse_tempholdout2n <- predictions$score(msr("regr.mse"))
mse_cv
mse_tempcv1
mse_tempcv2
mse_tempholdout1
mse_tempholdout2
mse_tempholdout1n
mse_tempholdout2n
